<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rt-thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rt-thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Apr 07 15:29:30 2025
<BR><P>
<H3>Maximum Stack Usage =       1476 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
dfs_uffs_unlink &rArr; uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10a]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">rt_kprintf</a><BR>
 <LI><a href="#[273]">rt_mutex_drop_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26e]">_thread_update_priority</a><BR>
 <LI><a href="#[22c]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[123]">msh_exec</a><BR>
 <LI><a href="#[d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">NMI_Handler</a><BR>
 <LI><a href="#[f]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[10]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[1ed]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ed]">copydir</a><BR>
 <LI><a href="#[24b]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24b]">directory_delete_for_msh</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3e]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3a]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from context_rvds.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[39]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3f]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from context_rvds.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3d]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">RTC1_IRQHandler</a> from nrfx_rtc.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spi.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[40]">SPIM3_IRQHandler</a> from nrfx_spim.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from board.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[22]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">UARTE0_UART0_IRQHandler</a> from nrfx_uart.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3c]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3b]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c9]">__main</a> from __main.o(!!!main) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[6a]">_device_init</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.text)
 <LI><a href="#[6b]">_device_release</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.text)
 <LI><a href="#[6e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4a]">_mtd_close</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[4b]">_mtd_control</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[46]">_mtd_init</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[47]">_mtd_open</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[48]">_mtd_read</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[49]">_mtd_write</a> from mtd_nand.o(.text) referenced from mtd_nand.o(.text)
 <LI><a href="#[a6]">_pin_cmd</a> from pin.o(.text) referenced from pin.o(FSymTab)
 <LI><a href="#[45]">_pin_control</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[43]">_pin_read</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[44]">_pin_write</a> from pin.o(.text) referenced from pin.o(.text)
 <LI><a href="#[70]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[52]">_spi_bus_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[53]">_spi_bus_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[56]">_spidev_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[54]">_spidev_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[55]">_spidev_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[6f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[5b]">_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[5c]">_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[5d]">_timer_thread_entry</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[8]">_uart_cfg</a> from drv_uart.o(.text) referenced 2 times from drv_uart.o(.data)
 <LI><a href="#[9]">_uart_ctrl</a> from drv_uart.o(.text) referenced 2 times from drv_uart.o(.data)
 <LI><a href="#[b]">_uart_getc</a> from drv_uart.o(.text) referenced 2 times from drv_uart.o(.data)
 <LI><a href="#[a]">_uart_putc</a> from drv_uart.o(.text) referenced 2 times from drv_uart.o(.data)
 <LI><a href="#[60]">app_error_fault_handler</a> from app_error_weak.o(.text) referenced from nrf_sdh.o(.text)
 <LI><a href="#[42]">assert_hook</a> from cmb_port.o(.text) referenced from cmb_port.o(.text)
 <LI><a href="#[c2]">ble_advertising_on_ble_evt</a> from ble_advertising.o(.text) referenced from ble_app_uart.o(sdh_ble_observers1)
 <LI><a href="#[67]">ble_app_softdevice</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[be]">ble_app_uart</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(FSymTab)
 <LI><a href="#[bf]">ble_evt_handler</a> from ble_conn_state.o(.text) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[c0]">ble_evt_handler</a> from ble_conn_params_rtt.o(.text) referenced from ble_conn_params_rtt.o(sdh_ble_observers1)
 <LI><a href="#[c5]">ble_evt_handler</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(sdh_ble_observers3)
 <LI><a href="#[c3]">ble_nus_on_ble_evt</a> from ble_nus.o(.text) referenced from ble_app_uart.o(sdh_ble_observers2)
 <LI><a href="#[1b9]">button_1_callback</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.text)
 <LI><a href="#[1ba]">button_2_callback</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.text)
 <LI><a href="#[1bb]">button_3_callback</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.text)
 <LI><a href="#[1bc]">button_4_callback</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.text)
 <LI><a href="#[ad]">clear</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[57]">clk_event_handler</a> from board.o(.text) referenced from board.o(.text)
 <LI><a href="#[69]">clock_irq_handler</a> from nrf_drv_clock.o(.text) referenced from nrf_drv_clock.o(.text)
 <LI><a href="#[a5]">cmb_test</a> from cmb_port.o(.text) referenced from cmb_port.o(FSymTab)
 <LI><a href="#[b3]">cmd_cat</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b5]">cmd_cd</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b1]">cmd_cp</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[bb]">cmd_df</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[bc]">cmd_echo</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[ac]">cmd_free</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[af]">cmd_list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[b0]">cmd_ls</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b7]">cmd_mkdir</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b8]">cmd_mkfs</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b9]">cmd_mount</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b2]">cmd_mv</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[ab]">cmd_ps</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[b6]">cmd_pwd</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[b4]">cmd_rm</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[bd]">cmd_tail</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[ba]">cmd_umount</a> from msh_file.o(.text) referenced from msh_file.o(FSymTab)
 <LI><a href="#[66]">conn_params_error_handler</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[7c]">dfs_device_fs_close</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[80]">dfs_device_fs_getdents</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[7d]">dfs_device_fs_ioctl</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[82]">dfs_device_fs_mount</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[7b]">dfs_device_fs_open</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[81]">dfs_device_fs_poll</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[7e]">dfs_device_fs_read</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[83]">dfs_device_fs_stat</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[7f]">dfs_device_fs_write</a> from devfs.o(.text) referenced from devfs.o(.constdata)
 <LI><a href="#[9f]">dfs_init</a> from dfs.o(.text) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[85]">dfs_uffs_close</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[89]">dfs_uffs_flush</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8b]">dfs_uffs_getdents</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[a2]">dfs_uffs_init</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.rti_fn.4)
 <LI><a href="#[86]">dfs_uffs_ioctl</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8e]">dfs_uffs_mkfs</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8c]">dfs_uffs_mount</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[84]">dfs_uffs_open</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[87]">dfs_uffs_read</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[92]">dfs_uffs_rename</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8a]">dfs_uffs_seek</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[91]">dfs_uffs_stat</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8f]">dfs_uffs_statfs</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[90]">dfs_uffs_unlink</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[8d]">dfs_uffs_unmount</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[88]">dfs_uffs_write</a> from dfs_uffs.o(.text) referenced from dfs_uffs.o(.constdata)
 <LI><a href="#[41]">exception_hook</a> from cmb_port.o(.text) referenced from cmb_port.o(.text)
 <LI><a href="#[59]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[a3]">finsh_system_init</a> from shell.o(.text) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[222]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[a8]">gpio_sample</a> from drv_gpio.o(.text) referenced from drv_gpio.o(FSymTab)
 <LI><a href="#[5a]">idle_thread_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[a9]">list_fd</a> from dfs.o(.text) referenced from dfs.o(FSymTab)
 <LI><a href="#[250]">main_thread_entry</a> from components.o(.text) referenced from components.o(.text)
 <LI><a href="#[aa]">msh_help</a> from msh.o(.text) referenced from msh.o(FSymTab)
 <LI><a href="#[a7]">mtd_nand</a> from mtd_nand.o(.text) referenced from mtd_nand.o(FSymTab)
 <LI><a href="#[97]">nand_erase_block</a> from uffs_nandif.o(.text) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[93]">nand_init_flash</a> from uffs_nandif.o(.text) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[95]">nand_read_page</a> from uffs_nandif.o(.text) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[94]">nand_release_flash</a> from uffs_nandif.o(.text) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[96]">nand_write_page</a> from uffs_nandif.o(.text) referenced from uffs_nandif.o(.constdata)
 <LI><a href="#[74]">nrf5x_pin_attach_irq</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[75]">nrf5x_pin_dettach_irq</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[76]">nrf5x_pin_irq_enable</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[71]">nrf5x_pin_mode</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[73]">nrf5x_pin_read</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[72]">nrf5x_pin_write</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c1]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(.text) referenced from ble_app_uart.o(sdh_ble_observers1)
 <LI><a href="#[c4]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(.text) referenced from ble_app_uart.o(sdh_ble_observers2)
 <LI><a href="#[63]">nrf_qwr_error_handler</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[c7]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble_rtt.o(.text) referenced from nrf_sdh_ble_rtt.o(sdh_stack_observers0)
 <LI><a href="#[64]">nus_data_handler</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[62]">on_adv_evt</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[65]">on_conn_params_evt</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[58]">pin_irq_hdr</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.text)
 <LI><a href="#[a1]">rt_cm_backtrace_init</a> from cmb_port.o(.text) referenced from cmb_port.o(.rti_fn.3)
 <LI><a href="#[9a]">rt_hw_pin_init</a> from drv_gpio.o(.text) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[9b]">rt_hw_spi_init</a> from drv_spi.o(.text) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[9c]">rt_hw_spim_init</a> from drv_spim.o(.text) referenced from drv_spim.o(.rti_fn.1)
 <LI><a href="#[4e]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[51]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[4c]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[4d]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[4f]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[50]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[9e]">rti_board_end</a> from components.o(.text) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[99]">rti_board_start</a> from components.o(.text) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[a4]">rti_end</a> from components.o(.text) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[98]">rti_start</a> from components.o(.text) referenced from components.o(.rti_fn.0)
 <LI><a href="#[c8]">sd_state_evt_handler</a> from nrf_drv_clock.o(.text) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[c6]">soc_evt_handler</a> from nrf_drv_clock.o(.text) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[3]">spi0_handler</a> from drv_spi.o(.text) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[4]">spi1_handler</a> from drv_spi.o(.text) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[5]">spi2_handler</a> from drv_spi.o(.text) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[77]">spi_configure</a> from drv_spi.o(.text) referenced from drv_spi.o(.constdata)
 <LI><a href="#[6]">spim3_handler</a> from drv_spim.o(.text) referenced 2 times from drv_spim.o(.data)
 <LI><a href="#[79]">spim_configure</a> from drv_spim.o(.text) referenced from drv_spim.o(.constdata)
 <LI><a href="#[7a]">spimxfer</a> from drv_spim.o(.text) referenced from drv_spim.o(.constdata)
 <LI><a href="#[78]">spixfer</a> from drv_spi.o(.text) referenced from drv_spi.o(.constdata)
 <LI><a href="#[6d]">sys_free</a> from uffs_rtthread.o(.text) referenced from uffs_rtthread.o(.text)
 <LI><a href="#[6c]">sys_malloc</a> from uffs_rtthread.o(.text) referenced from uffs_rtthread.o(.text)
 <LI><a href="#[7]">uart0_event_hander</a> from drv_uart.o(.text) referenced 2 times from drv_uart.o(.data)
 <LI><a href="#[68]">uart_task</a> from ble_app_uart.o(.text) referenced from ble_app_uart.o(.text)
 <LI><a href="#[a0]">ulog_console_backend_init</a> from console_be.o(.text) referenced from console_be.o(.rti_fn.2)
 <LI><a href="#[58c]">ulog_console_backend_output</a> from console_be.o(.text) referenced from console_be.o(.text)
 <LI><a href="#[9d]">ulog_init</a> from ulog.o(.text) referenced from ulog.o(.rti_fn.1)
 <LI><a href="#[61]">update_timeout_handler</a> from ble_conn_params_rtt.o(.text) referenced from ble_conn_params_rtt.o(.text)
 <LI><a href="#[ae]">version</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cc]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5a9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5aa]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5ab]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5ac]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5ad]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cd]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[59b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cf]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5ae]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[5af]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[5b0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[5b1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[5b2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5b3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[5b4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5b5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[5b6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[5b7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5b8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[5b9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[5ba]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5bb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[5bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[5bd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[5be]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[5bf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[5c0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[5c1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[5c2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[5c3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[5c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[5c5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[5c6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[5c7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[5c8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[5c9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[cb]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[5ca]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[5cb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[da]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5cc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5a8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[dd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[5cd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[df]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f7]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_msp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
</UL>

<P><STRONG><a name="[f2]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[f1]"></a>__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cm_backtrace.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[5ce]"></a>__asm___10_cmb_port_c_15d1e976__cmb_get_msp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmb_port.o(.emb_text), UNUSED)

<P><STRONG><a name="[ff]"></a>__asm___10_cmb_port_c_15d1e976__cmb_get_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmb_port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>

<P><STRONG><a name="[101]"></a>__asm___10_cmb_port_c_15d1e976__cmb_get_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmb_port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>

<P><STRONG><a name="[100]"></a>__asm___10_cmb_port_c_15d1e976__cmb_set_psp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmb_port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>

<P><STRONG><a name="[449]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_store
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[44b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[44c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[44e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_xor
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_xor
</UL>

<P><STRONG><a name="[451]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
</UL>

<P><STRONG><a name="[454]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_sub
</UL>

<P><STRONG><a name="[457]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_cmp_exch
</UL>

<P><STRONG><a name="[459]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub_hs
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_sub_hs
</UL>

<P><STRONG><a name="[e1]"></a>$Super$$main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[e5]"></a>cm_backtrace_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cm_backtrace_init &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[e9]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cm_backtrace_firmware_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
</UL>

<P><STRONG><a name="[ee]"></a>cm_backtrace_call_stack_any</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cm_backtrace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
</UL>

<P><STRONG><a name="[f0]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[f6]"></a>cm_backtrace_assert</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_assert &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_sp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_msp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
</UL>

<P><STRONG><a name="[f9]"></a>cm_backtrace_fault</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_cm_backtrace_c_13c737ea__cmb_get_psp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>

<P><STRONG><a name="[fc]"></a>rt_cm_backtrace_exception_hook</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = rt_cm_backtrace_exception_hook &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_cmb_port_c_15d1e976__cmb_set_psp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_cmb_port_c_15d1e976__cmb_get_sp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_cmb_port_c_15d1e976__cmb_get_psp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_hook
</UL>

<P><STRONG><a name="[104]"></a>rt_cm_backtrace_assert_hook</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = rt_cm_backtrace_assert_hook &rArr; cm_backtrace_assert &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_cmb_port_c_15d1e976__cmb_get_sp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_hook
</UL>

<P><STRONG><a name="[41]"></a>exception_hook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = exception_hook &rArr; rt_cm_backtrace_exception_hook &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>assert_hook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = assert_hook &rArr; rt_cm_backtrace_assert_hook &rArr; cm_backtrace_assert &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>rt_cm_backtrace_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_cm_backtrace_init &rArr; cm_backtrace_init &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exception_install
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_set_hook
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[a5]"></a>cmb_test</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, cmb_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = cmb_test &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(FSymTab)
</UL>
<P><STRONG><a name="[10b]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[10d]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[10f]"></a>_sys_read</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[111]"></a>_sys_write</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[116]"></a>_sys_ensure</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[117]"></a>_sys_seek</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>

<P><STRONG><a name="[119]"></a>_sys_tmpnam</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[5cf]"></a>_sys_command_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, syscalls.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e0]"></a>_sys_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, syscalls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[11d]"></a>_sys_flen</STRONG> (Thumb, 28 bytes, Stack size 72 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>

<P><STRONG><a name="[5d0]"></a>_sys_istty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscalls.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>remove</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscalls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[11c]"></a>__rt_libc_exit</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cstdlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = __rt_libc_exit &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[122]"></a>system</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cstdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>

<P><STRONG><a name="[125]"></a>ltoa</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, cstdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>

<P><STRONG><a name="[124]"></a>itoa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cstdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltoa
</UL>

<P><STRONG><a name="[127]"></a>ultoa</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, cstdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa
</UL>

<P><STRONG><a name="[126]"></a>utoa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cstdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ultoa
</UL>

<P><STRONG><a name="[143]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_irq_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_dettach_irq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_attach_irq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_delhook
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_pointers
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_length
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_setprioceiling
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_set_filter
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_unregister
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[144]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_irq_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_dettach_irq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_attach_irq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_delhook
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_pointers
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_length
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_setprioceiling
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_set_filter
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_unregister
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[2bc]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2bd]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2ba]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[5d1]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c3]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[105]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[128]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5d2]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device_cspin
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase_all
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nandid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_uart
</UL>

<P><STRONG><a name="[12f]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_register_device
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>

<P><STRONG><a name="[131]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[135]"></a>rt_device_create</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[138]"></a>rt_device_destroy</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[13a]"></a>rt_device_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[13b]"></a>rt_device_open</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
</UL>

<P><STRONG><a name="[13c]"></a>rt_device_close</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
</UL>

<P><STRONG><a name="[13d]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
</UL>

<P><STRONG><a name="[113]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[13f]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
</UL>

<P><STRONG><a name="[140]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[141]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>

<P><STRONG><a name="[142]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
</UL>

<P><STRONG><a name="[145]"></a>rt_completion_wait</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
</UL>

<P><STRONG><a name="[14e]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[150]"></a>rt_data_queue_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[152]"></a>rt_data_queue_push</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[155]"></a>rt_data_queue_len</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_data_queue_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[156]"></a>rt_data_queue_pop</STRONG> (Thumb, 840 bytes, Stack size 64 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[157]"></a>rt_data_queue_peek</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peek &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[158]"></a>rt_data_queue_reset</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_data_queue_reset &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[15b]"></a>rt_data_queue_deinit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[15c]"></a>rt_ringbuffer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_uart
</UL>

<P><STRONG><a name="[15d]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_peek
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[15f]"></a>rt_ringbuffer_put</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[161]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[162]"></a>rt_ringbuffer_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_get &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[163]"></a>rt_ringbuffer_peek</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[164]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_putchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_hook
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[165]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>

<P><STRONG><a name="[166]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_hook
</UL>

<P><STRONG><a name="[167]"></a>rt_ringbuffer_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[168]"></a>rt_ringbuffer_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>

<P><STRONG><a name="[169]"></a>rt_ringbuffer_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ringbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[16a]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[16b]"></a>rt_pin_attach_irq</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_pin_attach_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sample
</UL>

<P><STRONG><a name="[16c]"></a>rt_pin_detach_irq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[16d]"></a>rt_pin_irq_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sample
</UL>

<P><STRONG><a name="[e2]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device_cspin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sample
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[e3]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sample
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_4_callback
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_3_callback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_2_callback
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_1_callback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[16e]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
</UL>

<P><STRONG><a name="[16f]"></a>rt_pin_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[179]"></a>rt_mtd_nand_register_device</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mtd_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[17a]"></a>rt_mtd_nand_read_id</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_mtd_nand_read_id &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nandid
</UL>

<P><STRONG><a name="[17b]"></a>rt_mtd_nand_read</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mtd_nand_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_page
</UL>

<P><STRONG><a name="[17c]"></a>rt_mtd_nand_write</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mtd_nand_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_page
</UL>

<P><STRONG><a name="[17d]"></a>rt_mtd_nand_move_page</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mtd_nand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[17e]"></a>rt_mtd_nand_erase_block</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mtd_nand_erase_block &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase_all
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_erase_block
</UL>

<P><STRONG><a name="[5d3]"></a>rt_mtd_nand_check_block</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mtd_nand.o(.text), UNUSED)

<P><STRONG><a name="[5d4]"></a>rt_mtd_nand_mark_badblock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mtd_nand.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>mtd_nandid</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mtd_nandid &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read_id
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[181]"></a>mtd_nand_read</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mtd_nand_read &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_dump_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[182]"></a>mtd_nand_readoob</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = mtd_nand_readoob &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_dump_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[183]"></a>mtd_nand_write</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mtd_nand_write &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[184]"></a>mtd_nand_erase</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mtd_nand_erase &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[185]"></a>mtd_nand_erase_all</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mtd_nand_erase_all &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_erase_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
</UL>

<P><STRONG><a name="[191]"></a>rt_hw_serial_register</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[192]"></a>rt_hw_serial_isr</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = rt_hw_serial_isr &rArr; rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_event_hander
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_software_intterrupt
</UL>

<P><STRONG><a name="[193]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spim_bus_init
</UL>

<P><STRONG><a name="[196]"></a>rt_spi_bus_attach_device_cspin</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[198]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device_cspin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>

<P><STRONG><a name="[199]"></a>rt_spi_configure</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>

<P><STRONG><a name="[19c]"></a>rt_spi_send_then_send</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[19d]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[19e]"></a>rt_spi_transfer</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_spi_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_sendrecv16
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_sendrecv8
</UL>

<P><STRONG><a name="[19f]"></a>rt_spi_sendrecv8</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>

<P><STRONG><a name="[1a0]"></a>rt_spi_sendrecv16</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>

<P><STRONG><a name="[1a1]"></a>rt_spi_transfer_message</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a2]"></a>rt_spi_take_bus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a3]"></a>rt_spi_release_bus</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a4]"></a>rt_spi_take</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[1a5]"></a>rt_spi_release</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[194]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[197]"></a>rt_spidev_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device_cspin
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>SysTick_Configuration</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Configuration &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ab]"></a>rt_hw_board_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[9a]"></a>rt_hw_pin_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b9]"></a>button_1_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = button_1_callback &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.text)
</UL>
<P><STRONG><a name="[1ba]"></a>button_2_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = button_2_callback &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>button_3_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = button_3_callback &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.text)
</UL>
<P><STRONG><a name="[1bc]"></a>button_4_callback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = button_4_callback &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>gpio_sample</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_sample &rArr; rt_pin_attach_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(FSymTab)
</UL>
<P><STRONG><a name="[9b]"></a>rt_hw_spi_init</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_hw_spi_init &rArr; rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1c2]"></a>rt_hw_spi_device_attach</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, drv_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[9c]"></a>rt_hw_spim_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_hw_spim_init &rArr; rt_hw_spim_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spim_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spim.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1ad]"></a>rt_hw_uart_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[82]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>dfs_device_fs_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>dfs_device_fs_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>dfs_device_fs_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>dfs_device_fs_open</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = dfs_device_fs_open &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[9f]"></a>dfs_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[1d1]"></a>dfs_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>

<P><STRONG><a name="[1d2]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>

<P><STRONG><a name="[1d7]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[1d6]"></a>fd_new</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[1d8]"></a>fd_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = fd_get &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftruncate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[1d9]"></a>fd_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftruncate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[1da]"></a>dfs_normalize_path</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[1dd]"></a>fd_is_open</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[1df]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[a9]"></a>list_fd</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[1e0]"></a>dfs_file_open</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[1e1]"></a>dfs_file_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[200]"></a>dfs_file_ioctl</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>

<P><STRONG><a name="[1ea]"></a>dfs_file_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[1e7]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1e2]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[1ec]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[1fe]"></a>dfs_file_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[1fb]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
</UL>

<P><STRONG><a name="[1e3]"></a>dfs_file_stat</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1e4]"></a>dfs_file_rename</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[203]"></a>dfs_file_ftruncate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftruncate
</UL>

<P><STRONG><a name="[1e5]"></a>ls</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>

<P><STRONG><a name="[1e8]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[1e9]"></a>cat</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>

<P><STRONG><a name="[1f1]"></a>copy</STRONG> (Thumb, 644 bytes, Stack size 88 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>

<P><STRONG><a name="[1cf]"></a>dfs_register</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = dfs_register &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
</UL>

<P><STRONG><a name="[1de]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[1f3]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[1f4]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1d0]"></a>dfs_mount</STRONG> (Thumb, 418 bytes, Stack size 88 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = dfs_mount &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[1f5]"></a>dfs_unmount</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
</UL>

<P><STRONG><a name="[1f6]"></a>dfs_mkfs</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = dfs_mkfs &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[1f7]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[1f8]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>

<P><STRONG><a name="[1f9]"></a>df</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[10c]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[10e]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[110]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
</UL>

<P><STRONG><a name="[114]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[118]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lseek &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[1fc]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[120]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[1fd]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access
</UL>

<P><STRONG><a name="[11e]"></a>fstat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[115]"></a>fsync</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1ff]"></a>fcntl</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ioctl
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>

<P><STRONG><a name="[201]"></a>ioctl</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>

<P><STRONG><a name="[202]"></a>ftruncate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ftruncate
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[204]"></a>statfs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>

<P><STRONG><a name="[1ee]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = mkdir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[205]"></a>rmdir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rmdir &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[206]"></a>opendir</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[207]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[208]"></a>telldir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[209]"></a>seekdir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[20a]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[20b]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[20c]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>

<P><STRONG><a name="[20d]"></a>access</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>

<P><STRONG><a name="[20e]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[20f]"></a>finsh_set_prompt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[211]"></a>finsh_get_prompt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[213]"></a>finsh_get_prompt_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[214]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[215]"></a>finsh_getchar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[218]"></a>finsh_set_device</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = finsh_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[219]"></a>finsh_get_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[21a]"></a>finsh_set_echo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[21b]"></a>finsh_get_echo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[222]"></a>finsh_thread_entry</STRONG> (Thumb, 1404 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[224]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[a3]"></a>finsh_system_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[aa]"></a>msh_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[ab]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[ac]"></a>cmd_free</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[123]"></a>msh_exec</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[22d]"></a>msh_auto_complete_path</STRONG> (Thumb, 702 bytes, Stack size 112 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = msh_auto_complete_path &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[21d]"></a>msh_auto_complete</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[21e]"></a>msh_opt_auto_complete</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_argc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[234]"></a>msh_cmd_opt_id_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_cmd_opt_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[235]"></a>msh_opt_list_dump</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_opt_list_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[174]"></a>msh_isint</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, msh_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msh_isint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[237]"></a>msh_ishex</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh_parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[239]"></a>msh_strtohex</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, msh_parse.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[ae]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[fe]"></a>list_thread</STRONG> (Thumb, 342 bytes, Stack size 256 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>

<P><STRONG><a name="[240]"></a>list_sem</STRONG> (Thumb, 220 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[243]"></a>list_event</STRONG> (Thumb, 660 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[244]"></a>list_mutex</STRONG> (Thumb, 246 bytes, Stack size 112 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = list_mutex &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[245]"></a>list_mailbox</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[246]"></a>list_mempool</STRONG> (Thumb, 234 bytes, Stack size 112 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[247]"></a>list_timer</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[248]"></a>list_device</STRONG> (Thumb, 900 bytes, Stack size 96 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[af]"></a>cmd_list</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = cmd_list &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[22c]"></a>msh_exec_script</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[5d5]"></a>rt_tick_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[24d]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[1a6]"></a>rt_tick_increase</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2cd]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[24f]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>

<P><STRONG><a name="[1af]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[251]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[250]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>rt_application_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[253]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[259]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, idle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[25a]"></a>rt_thread_idle_delhook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, idle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[2bf]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[25b]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_thread_defunct_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[257]"></a>rt_thread_idle_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[5d6]"></a>rt_thread_idle_gethandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>rt_sem_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[264]"></a>rt_sem_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[265]"></a>rt_sem_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[267]"></a>rt_sem_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[216]"></a>rt_sem_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sem_take &rArr; _rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[269]"></a>rt_sem_take_interruptible</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[26a]"></a>rt_sem_take_killable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[26b]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[217]"></a>rt_sem_release</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[26d]"></a>rt_sem_control</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[195]"></a>rt_mutex_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[272]"></a>rt_mutex_detach</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_deinit
</UL>

<P><STRONG><a name="[273]"></a>rt_mutex_drop_thread</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = rt_mutex_drop_thread &rArr;  _thread_update_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[274]"></a>rt_mutex_setprioceiling</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>

<P><STRONG><a name="[5d7]"></a>rt_mutex_getprioceiling</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>rt_mutex_create</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>

<P><STRONG><a name="[276]"></a>rt_mutex_delete</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemDelete
</UL>

<P><STRONG><a name="[19a]"></a>rt_mutex_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_trytake
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[279]"></a>rt_mutex_take_interruptible</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[27a]"></a>rt_mutex_take_killable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[27b]"></a>rt_mutex_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[19b]"></a>rt_mutex_release</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[27c]"></a>rt_mutex_control</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>

<P><STRONG><a name="[27d]"></a>rt_event_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[27e]"></a>rt_event_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[27f]"></a>rt_event_create</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[280]"></a>rt_event_delete</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[281]"></a>rt_event_send</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[283]"></a>rt_event_recv</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
</UL>

<P><STRONG><a name="[284]"></a>rt_event_recv_interruptible</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
</UL>

<P><STRONG><a name="[285]"></a>rt_event_recv_killable</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
</UL>

<P><STRONG><a name="[286]"></a>rt_event_control</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[287]"></a>rt_mb_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>

<P><STRONG><a name="[288]"></a>rt_mb_detach</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[289]"></a>rt_mb_create</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[28a]"></a>rt_mb_delete</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[28c]"></a>rt_mb_send_wait</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[28d]"></a>rt_mb_send_wait_interruptible</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_interruptible
</UL>

<P><STRONG><a name="[28e]"></a>rt_mb_send_wait_killable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_killable
</UL>

<P><STRONG><a name="[28f]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[290]"></a>rt_mb_send_interruptible</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait_interruptible
</UL>

<P><STRONG><a name="[291]"></a>rt_mb_send_killable</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait_killable
</UL>

<P><STRONG><a name="[292]"></a>rt_mb_urgent</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[294]"></a>rt_mb_recv</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[295]"></a>rt_mb_recv_interruptible</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[296]"></a>rt_mb_recv_killable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
</UL>

<P><STRONG><a name="[297]"></a>rt_mb_control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[5d8]"></a>rt_interrupt_enter_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[5d9]"></a>rt_interrupt_leave_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>rt_interrupt_enter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM3_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>rt_interrupt_leave</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM3_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[146]"></a>rt_hw_interrupt_is_disabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[298]"></a>rt_hw_us_delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[29c]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[29a]"></a>rt_vsnprintf</STRONG> (Thumb, 898 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
</UL>

<P><STRONG><a name="[107]"></a>rt_kprintf</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase_all
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nandid
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_dump_hex
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_umount
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_uart
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPutLocked
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetLocked
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateNewFile
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsSrcNewerThanObj
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBlockFromNode
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufUnLockGroup
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMinimunPageIdFromDirtyList
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInspect
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToDirtyList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDirtyList
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDeviceConfig
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[10a]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_register_device
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_erase_block
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_move_page
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read_id
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_detach_irq
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_reset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_peek
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_device
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt_mode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_getc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_putc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_ctrl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spim_bus_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spimxfer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_set_suspend_state
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_detach
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_control
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_statfs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_set_filter
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_unregister
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_page
</UL>

<P><STRONG><a name="[29d]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[5da]"></a>rt_hw_cpu_arch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>rt_strerror</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[29e]"></a>rt_get_errno</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[13e]"></a>rt_set_errno</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftruncate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_setprioceiling
</UL>

<P><STRONG><a name="[29f]"></a>_rt_errno</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[137]"></a>rt_memset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device_cspin
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_setup_storage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_write_page
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_page
</UL>

<P><STRONG><a name="[160]"></a>rt_memcpy</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[223]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2a1]"></a>rt_memcmp</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[109]"></a>rt_strlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[2a0]"></a>rt_strstr</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[5db]"></a>rt_strcasecmp</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_name
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[5dc]"></a>rt_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
</UL>

<P><STRONG><a name="[176]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[5dd]"></a>rt_strnlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>rt_malloc</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[1dc]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>

<P><STRONG><a name="[23a]"></a>rt_show_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[11a]"></a>rt_snprintf</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_tmpnam
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
</UL>

<P><STRONG><a name="[2a5]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[24c]"></a>rt_sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[112]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
</UL>

<P><STRONG><a name="[1ae]"></a>rt_console_set_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_console_set_device &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2a6]"></a>rt_kputs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_kputs &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[5de]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[5df]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>rt_system_heap_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_system_heap_init &rArr; rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1d4]"></a>rt_realloc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_realloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>

<P><STRONG><a name="[1d5]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>

<P><STRONG><a name="[139]"></a>rt_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_destroy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[228]"></a>rt_memory_info</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[2aa]"></a>rt_malloc_align</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[2ab]"></a>rt_free_align</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2b8]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[106]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[2a7]"></a>rt_smem_init</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[2ad]"></a>rt_smem_detach</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2a4]"></a>rt_smem_alloc</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[2a9]"></a>rt_smem_free</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
</UL>

<P><STRONG><a name="[2a8]"></a>rt_smem_realloc</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_smem_realloc &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[5e0]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[5e1]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[5e4]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_pointers
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_length
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2ae]"></a>rt_object_get_length</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>

<P><STRONG><a name="[2af]"></a>rt_object_get_pointers</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>

<P><STRONG><a name="[130]"></a>rt_object_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
</UL>

<P><STRONG><a name="[134]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_detach
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
</UL>

<P><STRONG><a name="[266]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_custom_object_create
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[25d]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_custom_object_destroy
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[133]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[132]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_destroy
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_control
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[12e]"></a>rt_object_find</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[2b3]"></a>rt_object_get_name</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_get_name
</UL>

<P><STRONG><a name="[2b4]"></a>rt_custom_object_create</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2b5]"></a>rt_custom_object_destroy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[5e5]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_up.o(.text), UNUSED)

<P><STRONG><a name="[5e6]"></a>rt_scheduler_switch_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_up.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>rt_system_scheduler_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, scheduler_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b9]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[258]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2bb]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[14d]"></a>rt_schedule</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[159]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
</UL>

<P><STRONG><a name="[15a]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
</UL>

<P><STRONG><a name="[147]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_up.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[5e7]"></a>rt_thread_suspend_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[5e8]"></a>rt_thread_resume_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[5e9]"></a>rt_thread_inited_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[25e]"></a>rt_thread_init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[14f]"></a>rt_thread_resume</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[227]"></a>rt_thread_startup</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_uart
</UL>

<P><STRONG><a name="[2c6]"></a>rt_thread_detach</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[225]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_uart
</UL>

<P><STRONG><a name="[2c7]"></a>rt_thread_delete</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[2c8]"></a>rt_thread_yield</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[14a]"></a>rt_thread_suspend_with_flag</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_suspend_with_flag &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_set_suspend_state
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[2ca]"></a>rt_thread_sleep</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[2cb]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[2cc]"></a>rt_thread_delay_until</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[e4]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[121]"></a>rt_thread_control</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[2ce]"></a>rt_thread_suspend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
</UL>

<P><STRONG><a name="[2cf]"></a>rt_thread_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[2d0]"></a>rt_thread_get_name</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_name
</UL>

<P><STRONG><a name="[5ea]"></a>rt_timer_enter_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[5eb]"></a>rt_timer_exit_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>rt_timer_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[2be]"></a>rt_timer_detach</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[2d7]"></a>rt_timer_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[2d8]"></a>rt_timer_delete</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[14c]"></a>rt_timer_start</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2c5]"></a>rt_timer_stop</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[14b]"></a>rt_timer_control</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay_until
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[24e]"></a>rt_timer_check</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2da]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[2db]"></a>rt_soft_timer_check</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[254]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[256]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c9]"></a>nrfx_uart_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
</UL>

<P><STRONG><a name="[1c8]"></a>nrfx_uart_uninit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_ctrl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
</UL>

<P><STRONG><a name="[2f0]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[2ef]"></a>nrfx_uart_tx</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>

<P><STRONG><a name="[1c7]"></a>nrfx_uart_rx</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_event_hander
</UL>

<P><STRONG><a name="[2f4]"></a>nrfx_uart_rx_ready</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>

<P><STRONG><a name="[2f5]"></a>nrfx_uart_rx_enable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>

<P><STRONG><a name="[2f6]"></a>nrfx_uart_rx_disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
</UL>

<P><STRONG><a name="[2f7]"></a>nrfx_uart_errorsrc_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>

<P><STRONG><a name="[2f9]"></a>nrfx_uart_tx_abort</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
</UL>

<P><STRONG><a name="[2fb]"></a>nrfx_uart_rx_abort</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
</UL>

<P><STRONG><a name="[18]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>nrfx_spim_init</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
</UL>

<P><STRONG><a name="[309]"></a>nrfx_spim_uninit</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_pin_uninit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_abort
</UL>

<P><STRONG><a name="[312]"></a>nrfx_spim_xfer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer_dcx
</UL>

<P><STRONG><a name="[313]"></a>nrfx_spim_xfer_dcx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[1c5]"></a>rtt_nrfx_spim_xfer</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rtt_nrfx_spim_xfer &rArr; rtt_spim_xfer &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spimxfer
</UL>

<P><STRONG><a name="[316]"></a>nrfx_spim_abort</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_abort
</UL>

<P><STRONG><a name="[5ec]"></a>nrfx_spim_start_task_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_spim.o(.text), UNUSED)

<P><STRONG><a name="[5ed]"></a>nrfx_spim_end_event_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_spim.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SPIM3_IRQHandler &rArr; irq_handler &rArr; finish_transfer &rArr; rt_completion_done &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>nrfx_clock_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[1a9]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[319]"></a>nrfx_clock_disable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nrfx_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_uninit
</UL>

<P><STRONG><a name="[31c]"></a>nrfx_clock_stop</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_clock_stop &rArr; nrfx_clock_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_is_running
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_uninit
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[320]"></a>nrfx_clock_uninit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_uninit
</UL>

<P><STRONG><a name="[1aa]"></a>nrfx_clock_start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_start
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>

<P><STRONG><a name="[5ee]"></a>nrfx_clock_calibration_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_clock.o(.text), UNUSED)

<P><STRONG><a name="[5ef]"></a>nrfx_clock_is_calibrating</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrfx_clock.o(.text), UNUSED)

<P><STRONG><a name="[5f0]"></a>nrfx_clock_calibration_timer_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_clock.o(.text), UNUSED)

<P><STRONG><a name="[5f1]"></a>nrfx_clock_calibration_timer_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrfx_clock.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_CLOCK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5a7]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[324]"></a>nvmc_wait</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
</UL>

<P><STRONG><a name="[323]"></a>nvmc_config</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, system_nrf52840.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvmc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, system_nrf52840.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; nvmc_config
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_249
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_136
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_120
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_115
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_103
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_98
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_66
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf52_errata_36
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[335]"></a>nrfx_gpiote_channel_alloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_allocated_set
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accuracy_channel_alloc
</UL>

<P><STRONG><a name="[33a]"></a>nrfx_gpiote_channel_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_gpiote_channel_free
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_allocated_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>

<P><STRONG><a name="[1b8]"></a>nrfx_gpiote_init</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[5f2]"></a>nrfx_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>nrfx_gpiote_in_event_disable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_irq_enable
</UL>

<P><STRONG><a name="[1b5]"></a>nrfx_gpiote_in_uninit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_gpiote_in_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_te_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_check
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_clear
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_dettach_irq
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_uninit
</UL>

<P><STRONG><a name="[349]"></a>nrfx_gpiote_out_uninit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_te_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_check
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_clear
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_uninit
</UL>

<P><STRONG><a name="[34a]"></a>nrfx_gpiote_uninit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_as_non_task_out
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
</UL>

<P><STRONG><a name="[353]"></a>nrfx_gpiote_out_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[354]"></a>nrfx_gpiote_out_prealloc_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[355]"></a>nrfx_gpiote_out_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>

<P><STRONG><a name="[356]"></a>nrfx_gpiote_out_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[357]"></a>nrfx_gpiote_out_toggle</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>

<P><STRONG><a name="[5f3]"></a>nrfx_gpiote_out_task_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)

<P><STRONG><a name="[5f4]"></a>nrfx_gpiote_out_task_disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>nrfx_gpiote_out_task_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_out_task_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_addr_get
</UL>

<P><STRONG><a name="[35a]"></a>nrfx_gpiote_out_task_addr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_address_get
</UL>

<P><STRONG><a name="[35c]"></a>nrfx_gpiote_set_task_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_set_task_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_addr_get
</UL>

<P><STRONG><a name="[35e]"></a>nrfx_gpiote_set_task_addr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_address_get
</UL>

<P><STRONG><a name="[35f]"></a>nrfx_gpiote_clr_task_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_clr_task_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_addr_get
</UL>

<P><STRONG><a name="[361]"></a>nrfx_gpiote_clr_task_addr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_get
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_address_get
</UL>

<P><STRONG><a name="[5f5]"></a>nrfx_gpiote_out_task_force</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>nrfx_gpiote_out_task_trigger</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_out_task_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_trigger
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>

<P><STRONG><a name="[364]"></a>nrfx_gpiote_set_task_trigger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_set_task_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_trigger
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>

<P><STRONG><a name="[365]"></a>nrfx_gpiote_clr_task_trigger</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_clr_task_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_task_trigger
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>

<P><STRONG><a name="[1b4]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrfx_gpiote_in_init &rArr; gpiote_in_init &rArr; accuracy_channel_alloc &rArr; nrfx_gpiote_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_attach_irq
</UL>

<P><STRONG><a name="[367]"></a>nrfx_gpiote_in_prealloc_init</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
</UL>

<P><STRONG><a name="[1b6]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_in_event_get
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_irq_enable
</UL>

<P><STRONG><a name="[36c]"></a>nrfx_gpiote_in_is_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>

<P><STRONG><a name="[36d]"></a>nrfx_gpiote_in_event_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_in_event_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_addr_get
</UL>

<P><STRONG><a name="[36e]"></a>nrfx_gpiote_in_event_addr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_get
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_address_get
</UL>

<P><STRONG><a name="[1c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_check
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5f6]"></a>nrfx_rtc_init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, nrfx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>nrfx_rtc_uninit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
</UL>

<P><STRONG><a name="[378]"></a>nrfx_rtc_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>

<P><STRONG><a name="[379]"></a>nrfx_rtc_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
</UL>

<P><STRONG><a name="[37a]"></a>nrfx_rtc_cc_disable</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_check
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable_check
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
</UL>

<P><STRONG><a name="[37e]"></a>nrfx_rtc_cc_set</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_cc_set
</UL>

<P><STRONG><a name="[382]"></a>nrfx_rtc_tick_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
</UL>

<P><STRONG><a name="[383]"></a>nrfx_rtc_tick_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
</UL>

<P><STRONG><a name="[384]"></a>nrfx_rtc_overflow_enable</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_enable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
</UL>

<P><STRONG><a name="[385]"></a>nrfx_rtc_overflow_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
</UL>

<P><STRONG><a name="[5f7]"></a>nrfx_rtc_max_ticks_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrfx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>RTC1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>nrfx_spi_init</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrfx_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[38d]"></a>nrfx_spi_uninit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>

<P><STRONG><a name="[1c0]"></a>nrfx_spi_xfer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[5f8]"></a>nrfx_spi_abort</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_spi.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>app_error_fault_handler</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_error_weak.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(.text)
</UL>
<P><STRONG><a name="[39c]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[416]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[5f9]"></a>nrf_ble_gatt_att_mtu_central_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(.text), UNUSED)

<P><STRONG><a name="[5fa]"></a>nrf_ble_gatt_eff_mtu_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_gatt.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>nrf_ble_gatt_data_length_set</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_ble_gatt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>

<P><STRONG><a name="[5fb]"></a>nrf_ble_gatt_data_length_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrf_ble_gatt.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3a0]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[3a2]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>

<P><STRONG><a name="[3a3]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_srv_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[3a5]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[3a6]"></a>characteristic_add</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, ble_srv_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = characteristic_add &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[3a8]"></a>descriptor_add</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, ble_srv_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[3aa]"></a>nrf_strerror_find</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_strerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[3a9]"></a>nrf_strerror_get</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_strerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[3b3]"></a>ble_advertising_start</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_high_duty
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[412]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[3ba]"></a>ble_advertising_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_is_valid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[c2]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[5fc]"></a>ble_advertising_peer_addr_reply</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_advertising.o(.text), UNUSED)

<P><STRONG><a name="[5fd]"></a>ble_advertising_whitelist_reply</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ble_advertising.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_advertising.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[3c0]"></a>ble_advertising_modes_config_set</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_advertising.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3c1]"></a>ble_advertising_advdata_update</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ble_advertising.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
</UL>

<P><STRONG><a name="[5fe]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(.text), UNUSED)

<P><STRONG><a name="[5ff]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[3c4]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[600]"></a>privilege_level_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_util_platform.o(.text), UNUSED)

<P><STRONG><a name="[601]"></a>current_int_priority_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_util_platform.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[3c8]"></a>nrf_atflags_fetch_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_atflags.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
</UL>

<P><STRONG><a name="[3ca]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>

<P><STRONG><a name="[3cc]"></a>nrf_atflags_fetch_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_atflags.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_clear_flag
</UL>

<P><STRONG><a name="[41d]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_lesc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_flag_count
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>

<P><STRONG><a name="[602]"></a>nrf_atflags_init</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nrf_atflags.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>nrf_atflags_find_and_set_flag</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_atflags.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[3cf]"></a>nrf_atflags_find_and_clear_flag</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf_atflags.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_clear
</UL>

<P><STRONG><a name="[3d0]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[3bd]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_advdata_update
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[3df]"></a>ble_advdata_search</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_appearance_find
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_uuid_find
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_short_name_find
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_name_find
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[3ac]"></a>ble_advdata_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[3e0]"></a>ble_advdata_name_find</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_advdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3e1]"></a>ble_advdata_short_name_find</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ble_advdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3e2]"></a>ble_advdata_uuid_find</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, ble_advdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[3e3]"></a>ble_advdata_appearance_find</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, ble_advdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>

<P><STRONG><a name="[3ed]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[3ee]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[3ef]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[43a]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_is_running
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>

<P><STRONG><a name="[3f0]"></a>nrf_sdh_suspend</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[3f1]"></a>nrf_sdh_resume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[603]"></a>nrf_sdh_is_suspended</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_sdh.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3e5]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[3e7]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[3f8]"></a>ble_conn_params_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ble_conn_params_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[3f9]"></a>ble_conn_params_stop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_conn_params_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>

<P><STRONG><a name="[400]"></a>ble_conn_params_change_conn_params</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>

<P><STRONG><a name="[402]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[401]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, nrf_sdh_ble_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[403]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nrf_sdh_ble_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_sdh_ble_enable &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[405]"></a>app_error_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_sdh_ble_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[419]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[40f]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[c4]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; on_rw_authorize_request
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_release
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[3a4]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
</UL>

<P><STRONG><a name="[604]"></a>app_error_save_and_stop</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, app_error.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[40d]"></a>ble_nus_init</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ble_nus_init &rArr; characteristic_add &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[40e]"></a>ble_nus_data_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_task
</UL>

<P><STRONG><a name="[1cb]"></a>uart_getc_hook</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_getc_hook &rArr; rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_getc
</UL>

<P><STRONG><a name="[1ca]"></a>uart_putc_hook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_putc_hook &rArr; rt_ringbuffer_putchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_putc
</UL>

<P><STRONG><a name="[be]"></a>ble_app_uart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = ble_app_uart &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(FSymTab)
</UL>
<P><STRONG><a name="[41b]"></a>bcs_internal_state_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_init
</UL>

<P><STRONG><a name="[41c]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_periph_handles
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_central_handles
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>

<P><STRONG><a name="[41e]"></a>active_flag_count</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_count
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_peripheral_conn_count
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_central_conn_count
</UL>

<P><STRONG><a name="[424]"></a>ble_conn_state_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcs_internal_state_reset
</UL>

<P><STRONG><a name="[426]"></a>ble_conn_state_valid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_lesc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>

<P><STRONG><a name="[427]"></a>ble_conn_state_role</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[428]"></a>ble_conn_state_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[429]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[42a]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[42b]"></a>ble_conn_state_lesc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[42c]"></a>ble_conn_state_conn_count</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_flag_count
</UL>

<P><STRONG><a name="[42d]"></a>ble_conn_state_central_conn_count</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_flag_count
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[42e]"></a>ble_conn_state_peripheral_conn_count</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_flag_count
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[42f]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
</UL>

<P><STRONG><a name="[430]"></a>ble_conn_state_central_handles</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[431]"></a>ble_conn_state_periph_handles</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[3d1]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[432]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
</UL>

<P><STRONG><a name="[433]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>

<P><STRONG><a name="[434]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>

<P><STRONG><a name="[436]"></a>ble_conn_state_for_each_connected</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>

<P><STRONG><a name="[437]"></a>ble_conn_state_for_each_set_user_flag</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>

<P><STRONG><a name="[605]"></a>nrf_drv_clock_init_check</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>nrf_drv_clock_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[43f]"></a>nrf_drv_clock_uninit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_uninit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_disable
</UL>

<P><STRONG><a name="[440]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
</UL>

<P><STRONG><a name="[442]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; lfclk_stop &rArr; nrfx_clock_stop &rArr; nrfx_clock_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[443]"></a>nrf_drv_clock_lfclk_is_running</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_is_running
</UL>

<P><STRONG><a name="[445]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>

<P><STRONG><a name="[446]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
</UL>

<P><STRONG><a name="[447]"></a>nrf_drv_clock_hfclk_is_running</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_is_running
</UL>

<P><STRONG><a name="[606]"></a>nrf_drv_clock_calibration_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text), UNUSED)

<P><STRONG><a name="[607]"></a>nrf_drv_clock_calibration_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text), UNUSED)

<P><STRONG><a name="[608]"></a>nrf_drv_clock_is_calibrating</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>

<P><STRONG><a name="[44a]"></a>nrf_atomic_u32_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>

<P><STRONG><a name="[3c9]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[3c7]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[3cd]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_clear
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[3cb]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_periph_handles
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_central_handles
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_peripheral_conn_count
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_central_conn_count
</UL>

<P><STRONG><a name="[44d]"></a>nrf_atomic_u32_fetch_xor</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor
</UL>

<P><STRONG><a name="[44f]"></a>nrf_atomic_u32_xor</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor
</UL>

<P><STRONG><a name="[450]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>

<P><STRONG><a name="[452]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>

<P><STRONG><a name="[453]"></a>nrf_atomic_u32_fetch_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>

<P><STRONG><a name="[455]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>

<P><STRONG><a name="[456]"></a>nrf_atomic_u32_cmp_exch</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch
</UL>

<P><STRONG><a name="[458]"></a>nrf_atomic_u32_fetch_sub_hs</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs
</UL>

<P><STRONG><a name="[45a]"></a>nrf_atomic_u32_sub_hs</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs
</UL>

<P><STRONG><a name="[45b]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[45c]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[45d]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[45e]"></a>nrf_atomic_flag_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[45f]"></a>uffs_BufInspect</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, uffs_buf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[460]"></a>uffs_BufInit</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_BufInit &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[465]"></a>uffs_BufFindGroupSlot</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[466]"></a>uffs_BufFreeClone</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToBufListTail
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[468]"></a>uffs_BufPut</STRONG> (Thumb, 566 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = uffs_BufPut &rArr; uffs_BufFreeClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateNewFile
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[46b]"></a>uffs_BufLoadPhyData</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = uffs_BufLoadPhyData &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[46f]"></a>uffs_BufClone</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BufClone &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromBufList
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[471]"></a>uffs_BufFindFrom</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_BufFindFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
</UL>

<P><STRONG><a name="[470]"></a>uffs_BufFind</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uffs_BufFind &rArr; uffs_BufFindFrom
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[472]"></a>uffs_BufGet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uffs_BufGet &rArr; uffs_BufFind &rArr; uffs_BufFindFrom
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateNewFile
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[484]"></a>_FindMinimunPageIdFromDirtyList</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _FindMinimunPageIdFromDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
</UL>

<P><STRONG><a name="[48a]"></a>_BufFlush</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckDirtyList
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupMatchParent
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushEx
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>

<P><STRONG><a name="[48f]"></a>uffs_BufFlushAll</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush_all
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
</UL>

<P><STRONG><a name="[490]"></a>uffs_BufReleaseAll</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[493]"></a>uffs_LoadPhyDataToBufEccUnCare</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = uffs_LoadPhyDataToBufEccUnCare &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[56f]"></a>uffs_BufLockGroup</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_BufLockGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[494]"></a>uffs_BufUnLockGroup</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BufUnLockGroup &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[495]"></a>uffs_BufFlushMostDirtyGroup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMostDirtyGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush
</UL>

<P><STRONG><a name="[498]"></a>uffs_BufFindFreeGroupSlot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_BufFindFreeGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushEx
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush
</UL>

<P><STRONG><a name="[497]"></a>uffs_BufFlush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_buf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFreeGroupSlot
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
</UL>

<P><STRONG><a name="[499]"></a>uffs_BufFlushEx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uffs_buf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFreeGroupSlot
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMostDirtyGroup
</UL>

<P><STRONG><a name="[49a]"></a>uffs_BufFlushGroup</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[49b]"></a>uffs_BufFlushGroupEx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroupEx &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[49c]"></a>uffs_BufFlushGroupMatchParent</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>

<P><STRONG><a name="[49d]"></a>uffs_BufNew</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = uffs_BufNew &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
</UL>

<P><STRONG><a name="[49f]"></a>uffs_BufGetEx</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[555]"></a>uffs_BufIsAllFree</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_buf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[609]"></a>uffs_BufIsAllEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_buf.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>uffs_BufSetAllEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uffs_buf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[60a]"></a>uffs_BufIncRef</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uffs_buf.o(.text), UNUSED)

<P><STRONG><a name="[60b]"></a>uffs_BufDecRef</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uffs_buf.o(.text), UNUSED)

<P><STRONG><a name="[4a0]"></a>uffs_BufMarkEmpty</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = uffs_BufMarkEmpty &rArr; _BreakFromDirty &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[4a1]"></a>uffs_BufWrite</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = uffs_BufWrite &rArr; uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFreeGroupSlot
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToDirtyList
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBufInInDirtyList
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[4a3]"></a>uffs_BufRead</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_BufRead
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
</UL>

<P><STRONG><a name="[4b7]"></a>uffs_seekdir</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = uffs_seekdir &rArr; uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
</UL>

<P><STRONG><a name="[a2]"></a>dfs_uffs_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = dfs_uffs_init &rArr; uffs_InitObjectBuf &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitObjectBuf
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitGlobalFsLock
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[60c]"></a>uffs_MtbGetMounted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_mtb.o(.text), UNUSED)

<P><STRONG><a name="[60d]"></a>uffs_MtbGetUnMounted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_mtb.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>uffs_RegisterMountTable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uffs_mtb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[4ac]"></a>uffs_UnRegisterMountTable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uffs_mtb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unmount
</UL>

<P><STRONG><a name="[4a8]"></a>uffs_Mount</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, uffs_mtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[4ab]"></a>uffs_UnMount</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, uffs_mtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = uffs_UnMount &rArr; uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unmount
</UL>

<P><STRONG><a name="[4c7]"></a>uffs_PutDevice</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uffs_mtb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush_all
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>

<P><STRONG><a name="[4c5]"></a>uffs_GetDeviceFromMountPointEx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uffs_mtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_GetDeviceFromMountPointEx &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[4c6]"></a>uffs_GetMatchedMountPointSize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_mtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uffs_GetMatchedMountPointSize &rArr; uffs_GetDeviceFromMountPointEx &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[4c8]"></a>uffs_GetDeviceFromMountPoint</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uffs_mtb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush_all
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_used
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_total
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_format
</UL>

<P><STRONG><a name="[60e]"></a>uffs_GetDeviceMountPoint</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uffs_mtb.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>uffs_crc16update</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_crc16update
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>

<P><STRONG><a name="[4c9]"></a>uffs_crc16sum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, uffs_crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16update
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum8
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[4cb]"></a>uffs_TreeInit</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[4cd]"></a>uffs_TreeRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = uffs_TreeRelease &rArr; uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[488]"></a>uffs_InsertNodeToTree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uffs_InsertNodeToTree &rArr; uffs_InsertToDirEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDirEntry
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToFileEntry
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDataEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
</UL>

<P><STRONG><a name="[48d]"></a>uffs_TreeFindDataNode</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindDataNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
</UL>

<P><STRONG><a name="[48c]"></a>uffs_TreeFindFileNode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[48b]"></a>uffs_TreeFindDirNode</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindDirNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpenEx
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[4d6]"></a>uffs_FindFromTree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uffs_FindFromTree &rArr; uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[4d7]"></a>uffs_TreeInsertToErasedListTailEx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
</UL>

<P><STRONG><a name="[483]"></a>uffs_TreeInsertToErasedListTail</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uffs_TreeInsertToErasedListTail &rArr; uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[4e1]"></a>uffs_TreeInsertToBadBlockList</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
</UL>

<P><STRONG><a name="[560]"></a>uffs_TreeSuspendAdd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
</UL>

<P><STRONG><a name="[4f5]"></a>uffs_TreeFindSuspendNode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
</UL>

<P><STRONG><a name="[57d]"></a>uffs_TreeRemoveSuspendNode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[4e5]"></a>uffs_TreeFindFileNodeWithParent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindFileNodeWithParent &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[4e6]"></a>uffs_TreeFindDirNodeWithParent</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindDirNodeWithParent &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[4e8]"></a>uffs_CompareFileName</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_CompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>

<P><STRONG><a name="[4e7]"></a>uffs_TreeCompareFileName</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CompareFileName
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
</UL>

<P><STRONG><a name="[4e9]"></a>uffs_TreeFindFileNodeByName</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = uffs_TreeFindFileNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[4ea]"></a>uffs_TreeFindDirNodeByBlock</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindDirNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ee]"></a>uffs_TreeFindErasedNodeByBlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ef]"></a>uffs_TreeFindBadNodeByBlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4eb]"></a>uffs_TreeFindFileNodeByBlock</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindFileNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ec]"></a>uffs_TreeFindDataNodeByBlock</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_TreeFindDataNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
</UL>

<P><STRONG><a name="[4ed]"></a>uffs_TreeFindNodeByBlock</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uffs_TreeFindNodeByBlock &rArr; uffs_TreeFindDataNodeByBlock &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNodeByBlock
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByBlock
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindBadNodeByBlock
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindErasedNodeByBlock
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[4f0]"></a>uffs_TreeFindDirNodeByName</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = uffs_TreeFindDirNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[4f1]"></a>uffs_BreakFromEntry</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_BreakFromEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[4f3]"></a>uffs_BuildTree</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = uffs_BuildTree &rArr; _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[4f4]"></a>uffs_FindFreeFsnSerial</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = uffs_FindFreeFsnSerial &rArr; uffs_TreeFindFileNode &rArr; uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindSuspendNode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[475]"></a>uffs_TreeGetErasedNode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = uffs_TreeGetErasedNode &rArr; uffs_FlashCheckErasedBlock &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNodeNoCheck
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[477]"></a>uffs_InsertToErasedListHead</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_InsertToErasedListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[60f]"></a>uffs_TreeSetNodeBlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uffs_tree.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>uffs_FlashInterfaceInit</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = uffs_FlashInterfaceInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateSpareDataSize
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSpareLayout
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[4fe]"></a>uffs_FlashInterfaceRelease</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = uffs_FlashInterfaceRelease &rArr; uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[4ff]"></a>uffs_FlashUnloadSpare</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uffs_FlashUnloadSpare
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[500]"></a>uffs_FlashReadPageTag</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>

<P><STRONG><a name="[46c]"></a>uffs_FlashReadPage</STRONG> (Thumb, 954 bytes, Stack size 160 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadPhyDataToBufEccUnCare
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLoadPhyData
</UL>

<P><STRONG><a name="[505]"></a>uffs_FlashMakeSpare</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = uffs_FlashMakeSpare &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
</UL>

<P><STRONG><a name="[47b]"></a>uffs_FlashWritePageCombine</STRONG> (Thumb, 1114 bytes, Stack size 128 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[4dd]"></a>uffs_FlashMarkDirtyPage</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = uffs_FlashMarkDirtyPage &rArr; uffs_FlashMakeSpare &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
</UL>

<P><STRONG><a name="[506]"></a>uffs_FlashMarkBadBlock</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
</UL>

<P><STRONG><a name="[4e0]"></a>uffs_FlashIsBadBlock</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uffs_FlashIsBadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[482]"></a>uffs_FlashEraseBlock</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = uffs_FlashEraseBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockAdd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[4f6]"></a>uffs_FlashCheckErasedBlock</STRONG> (Thumb, 364 bytes, Stack size 120 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = uffs_FlashCheckErasedBlock &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
</UL>

<P><STRONG><a name="[507]"></a>uffs_Version2Str</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uffs_version.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[548]"></a>uffs_GetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_version.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_version
</UL>

<P><STRONG><a name="[610]"></a>uffs_GetMainVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_version.o(.text), UNUSED)

<P><STRONG><a name="[611]"></a>uffs_GetMinorVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uffs_version.o(.text), UNUSED)

<P><STRONG><a name="[612]"></a>uffs_GetTrivialVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uffs_version.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>uffs_BlockInfoReleaseCache</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BlockInfoReleaseCache &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
</UL>

<P><STRONG><a name="[509]"></a>uffs_BlockInfoInitCache</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = uffs_BlockInfoInitCache &rArr; uffs_BlockInfoReleaseCache &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[474]"></a>uffs_BlockInfoLoad</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateNewFile
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFirstFreePage
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsBlockPagesFullUsed
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[50d]"></a>uffs_BlockInfoFindInCache</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
</UL>

<P><STRONG><a name="[476]"></a>uffs_BlockInfoGet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoFindInCache
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[47f]"></a>uffs_BlockInfoPut</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BlockInfoPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[47e]"></a>uffs_BlockInfoExpire</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpireAll
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[557]"></a>uffs_BlockInfoIsAllFree</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, uffs_blockinfo.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[50e]"></a>uffs_BlockInfoExpireAll</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uffs_blockinfo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[510]"></a>uffs_GetFirstBlockTimeStamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
</UL>

<P><STRONG><a name="[479]"></a>uffs_GetNextBlockTimeStamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uffs_public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[4d9]"></a>uffs_IsSrcNewerThanObj</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_IsSrcNewerThanObj &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[47d]"></a>uffs_FindBestPageInBlock</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[47c]"></a>uffs_FindPageInBlockWithPageId</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = uffs_FindPageInBlockWithPageId &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[50f]"></a>uffs_IsBlockPagesFullUsed</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>

<P><STRONG><a name="[481]"></a>uffs_IsThisBlockUsed</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = uffs_IsThisBlockUsed &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[478]"></a>uffs_GetBlockTimeStamp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = uffs_GetBlockTimeStamp &rArr; uffs_IsThisBlockUsed &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFirstBlockTimeStamp
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[486]"></a>uffs_IsPageErased</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = uffs_IsPageErased &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFirstFreePage
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreePagesCount
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
</UL>

<P><STRONG><a name="[511]"></a>uffs_FindFirstFreePage</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>

<P><STRONG><a name="[512]"></a>uffs_MakeSum8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>

<P><STRONG><a name="[46a]"></a>uffs_MakeSum16</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uffs_MakeSum16 &rArr; uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_crc16sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeCompareFileName
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDirOrFileNameSum
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[513]"></a>uffs_CreateNewFile</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4da]"></a>uffs_GetBlockFileDataLength</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[48e]"></a>uffs_GetFreePagesCount</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = uffs_GetFreePagesCount &rArr; uffs_IsPageErased &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[54e]"></a>uffs_GetDeviceUsed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_used
</UL>

<P><STRONG><a name="[4ad]"></a>uffs_GetDeviceFree</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uffs_public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_free
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_statfs
</UL>

<P><STRONG><a name="[54c]"></a>uffs_GetDeviceTotal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_public.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_total
</UL>

<P><STRONG><a name="[4dc]"></a>uffs_LoadMiniHeader</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, uffs_public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uffs_LoadMiniHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpTag
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
</UL>

<P><STRONG><a name="[515]"></a>uffs_GetObjectInfo</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = uffs_GetObjectInfo &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
</UL>

<P><STRONG><a name="[518]"></a>uffs_FindObjectOpen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_FindObjectOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
</UL>

<P><STRONG><a name="[51a]"></a>uffs_FindObjectOpenEx</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uffs_find.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
</UL>

<P><STRONG><a name="[51c]"></a>uffs_FindObjectFirst</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectCount
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
</UL>

<P><STRONG><a name="[51d]"></a>uffs_FindObjectNext</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceUnLock
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceLock
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectCount
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
</UL>

<P><STRONG><a name="[51e]"></a>uffs_FindObjectRewind</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_FindObjectRewind
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
</UL>

<P><STRONG><a name="[51f]"></a>uffs_FindObjectClose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_FindObjectClose
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFindInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
</UL>

<P><STRONG><a name="[520]"></a>uffs_FindObjectCount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uffs_find.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
</UL>

<P><STRONG><a name="[613]"></a>uffs_FindObjectTell</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_find.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>uffs_SemCreate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitGlobalFsLock
</UL>

<P><STRONG><a name="[522]"></a>uffs_SemWait</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = uffs_SemWait &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPutLocked
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetLocked
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>

<P><STRONG><a name="[523]"></a>uffs_SemSignal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPutLocked
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetLocked
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>

<P><STRONG><a name="[524]"></a>uffs_SemDelete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseGlobalFsLock
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
</UL>

<P><STRONG><a name="[614]"></a>uffs_OSGetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_rtthread.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>uffs_GetCurDateTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_rtthread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[4a6]"></a>uffs_MemSetupSystemAllocator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uffs_rtthread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[615]"></a>uffs_SetupDebugOutput</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_rtthread.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>uffs_PoolInit</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitObjectBuf
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufInit
</UL>

<P><STRONG><a name="[529]"></a>uffs_PoolVerify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uffs_PoolVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[4ce]"></a>uffs_PoolRelease</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = uffs_PoolRelease &rArr; uffs_SemDelete &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufRelease
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseObjectBuf
</UL>

<P><STRONG><a name="[4df]"></a>uffs_PoolGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[525]"></a>uffs_PoolGetLocked</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uffs_pool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
</UL>

<P><STRONG><a name="[502]"></a>uffs_PoolPut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufPutAll
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPutAll
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashCheckErasedBlock
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[526]"></a>uffs_PoolPutLocked</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uffs_pool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
</UL>

<P><STRONG><a name="[4d2]"></a>uffs_PoolGetBufByIndex</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_PoolGetBufByIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNodeByBlock
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByBlock
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByBlock
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeWithParent
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeWithParent
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectByIndex
</UL>

<P><STRONG><a name="[4d1]"></a>uffs_PoolGetIndex</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectIndex
</UL>

<P><STRONG><a name="[536]"></a>uffs_PoolCheckFreeList</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uffs_pool.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[528]"></a>uffs_PoolFindNextAllocated</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = uffs_PoolFindNextAllocated &rArr; FindNextAllocatedInSmallPool &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextAllocatedInSmallPool
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutAllObjectBuf
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufPutAll
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPutAll
</UL>

<P><STRONG><a name="[56a]"></a>uffs_PoolGetFreeCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uffs_pool.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreeObjectHandlers
</UL>

<P><STRONG><a name="[52a]"></a>uffs_PoolPutAll</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uffs_pool.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>

<P><STRONG><a name="[563]"></a>uffs_DeviceInitLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[565]"></a>uffs_DeviceReleaseLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseDevice
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[516]"></a>uffs_DeviceLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
</UL>

<P><STRONG><a name="[517]"></a>uffs_DeviceUnLock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uffs_device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
</UL>

<P><STRONG><a name="[554]"></a>uffs_FdSignatureIncrease</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[4c0]"></a>uffs_DirEntryBufInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = uffs_DirEntryBufInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitFileSystemObjects
</UL>

<P><STRONG><a name="[52b]"></a>uffs_DirEntryBufRelease</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseFileSystemObjects
</UL>

<P><STRONG><a name="[52c]"></a>uffs_DirEntryBufPutAll</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[616]"></a>uffs_DirEntryBufGetPool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_fd.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>uffs_get_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_fd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
</UL>

<P><STRONG><a name="[531]"></a>uffs_set_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_fd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[4b0]"></a>uffs_open</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = uffs_open &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[4b3]"></a>uffs_close</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = uffs_close &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[4b4]"></a>uffs_read</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = uffs_read &rArr; uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
</UL>

<P><STRONG><a name="[4b5]"></a>uffs_write</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020 + Unknown Stack Size
<LI>Call Chain = uffs_write &rArr; uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
</UL>

<P><STRONG><a name="[4b1]"></a>uffs_seek</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = uffs_seek &rArr; uffs_GlobalFsLockLock &rArr; uffs_SemWait &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SeekObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[53b]"></a>uffs_tell</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurOffset
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>

<P><STRONG><a name="[53d]"></a>uffs_eof</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EndOfFile
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>

<P><STRONG><a name="[4b6]"></a>uffs_flush</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = uffs_flush &rArr; uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlushObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
</UL>

<P><STRONG><a name="[4be]"></a>uffs_rename</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = uffs_rename &rArr; uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
</UL>

<P><STRONG><a name="[4ba]"></a>uffs_stat</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_lstat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
</UL>

<P><STRONG><a name="[4bc]"></a>uffs_remove</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = uffs_remove &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[543]"></a>uffs_ftruncate</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TruncateObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>

<P><STRONG><a name="[4bb]"></a>uffs_lstat</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316 + Unknown Stack Size
<LI>Call Chain = uffs_lstat &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[545]"></a>uffs_fstat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectPool
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stat
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>

<P><STRONG><a name="[4b2]"></a>uffs_closedir</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = uffs_closedir &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectClose
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
</UL>

<P><STRONG><a name="[4af]"></a>uffs_opendir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292 + Unknown Stack Size
<LI>Call Chain = uffs_opendir &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutDirEntry
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[4b8]"></a>uffs_readdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seekdir
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
</UL>

<P><STRONG><a name="[4b9]"></a>uffs_rewinddir</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = uffs_rewinddir &rArr; uffs_GlobalFsLockLock &rArr; uffs_SemWait &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolCheckFreeList
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolVerify
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectRewind
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
</UL>

<P><STRONG><a name="[4ae]"></a>uffs_mkdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252 + Unknown Stack Size
<LI>Call Chain = uffs_mkdir &rArr; uffs_CreateObject &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
</UL>

<P><STRONG><a name="[4bd]"></a>uffs_rmdir</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1404 + Unknown Stack Size
<LI>Call Chain = uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
</UL>

<P><STRONG><a name="[547]"></a>uffs_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetVersion
</UL>

<P><STRONG><a name="[549]"></a>uffs_format</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
</UL>

<P><STRONG><a name="[54b]"></a>uffs_space_total</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceTotal
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
</UL>

<P><STRONG><a name="[54d]"></a>uffs_space_used</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceUsed
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
</UL>

<P><STRONG><a name="[54f]"></a>uffs_space_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFree
</UL>

<P><STRONG><a name="[550]"></a>uffs_flush_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uffs_fd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>

<P><STRONG><a name="[4c1]"></a>uffs_InitGlobalFsLock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uffs_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = uffs_InitGlobalFsLock &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitFileSystemObjects
</UL>

<P><STRONG><a name="[551]"></a>uffs_ReleaseGlobalFsLock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseFileSystemObjects
</UL>

<P><STRONG><a name="[52f]"></a>uffs_GlobalFsLockLock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = uffs_GlobalFsLockLock &rArr; uffs_SemWait &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush_all
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_used
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_total
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_format
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreeObjectHandlers
</UL>

<P><STRONG><a name="[535]"></a>uffs_GlobalFsLockUnlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uffs_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = uffs_GlobalFsLockUnlock &rArr; uffs_SemSignal &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_SemSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush_all
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_used
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_space_total
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_format
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetFreeObjectHandlers
</UL>

<P><STRONG><a name="[54a]"></a>uffs_FormatDevice</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutAllObjectBuf
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufPutAll
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FdSignatureIncrease
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpireAll
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoIsAllFree
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashIsBadBlock
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufSetAllEmpty
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufIsAllFree
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_format
</UL>

<P><STRONG><a name="[55c]"></a>uffs_DumpDevice</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>

<P><STRONG><a name="[503]"></a>uffs_EccMake</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uffs_EccMake &rArr; uffs_EccMakeChunk256
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMakeChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[504]"></a>uffs_EccCorrect</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uffs_EccCorrect &rArr; uffs_EccCorrectChunk256
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrectChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
</UL>

<P><STRONG><a name="[4f8]"></a>uffs_EccMake8</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uffs_EccMake8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagMakeEcc
</UL>

<P><STRONG><a name="[4fa]"></a>uffs_EccCorrect8</STRONG> (Thumb, 212 bytes, Stack size 28 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uffs_EccCorrect8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TagEccCorrect
</UL>

<P><STRONG><a name="[564]"></a>uffs_BadBlockInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uffs_badblock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[480]"></a>uffs_BadBlockProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uffs_badblock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uffs_BadBlockProcess &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepThree
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>

<P><STRONG><a name="[55f]"></a>uffs_BadBlockProcessSuspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uffs_badblock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uffs_BadBlockProcessSuspend &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeSuspendAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[561]"></a>uffs_BadBlockRecover</STRONG> (Thumb, 584 bytes, Stack size 72 bytes, uffs_badblock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = uffs_BadBlockRecover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindNodeByBlock
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetNextBlockTimeStamp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadPhyDataToBufEccUnCare
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[501]"></a>uffs_BadBlockAdd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_badblock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = uffs_BadBlockAdd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
</UL>

<P><STRONG><a name="[4c3]"></a>uffs_InitDevice</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, uffs_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = uffs_InitDevice &rArr; uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceReleaseLock
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceInitLock
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDeviceConfig
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
</UL>

<P><STRONG><a name="[4c4]"></a>uffs_ReleaseDevice</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, uffs_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeviceReleaseLock
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoReleaseCache
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufReleaseAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
</UL>

<P><STRONG><a name="[566]"></a>uffs_InitFileSystemObjects</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uffs_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitObjectBuf
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitGlobalFsLock
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufInit
</UL>

<P><STRONG><a name="[567]"></a>uffs_ReleaseFileSystemObjects</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uffs_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseGlobalFsLock
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DirEntryBufRelease
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseObjectBuf
</UL>

<P><STRONG><a name="[4a5]"></a>uffs_setup_storage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uffs_nandif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uffs_setup_storage &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
</UL>

<P><STRONG><a name="[534]"></a>uffs_GetObjectPool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uffs_fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[4bf]"></a>uffs_InitObjectBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = uffs_InitObjectBuf &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitFileSystemObjects
</UL>

<P><STRONG><a name="[568]"></a>uffs_ReleaseObjectBuf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReleaseFileSystemObjects
</UL>

<P><STRONG><a name="[569]"></a>uffs_GetFreeObjectHandlers</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockUnlock
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GlobalFsLockLock
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetFreeCount
</UL>

<P><STRONG><a name="[533]"></a>uffs_PutObject</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = uffs_PutObject &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutAllObjectBuf
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[553]"></a>uffs_PutAllObjectBuf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[530]"></a>uffs_GetObject</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = uffs_GetObject &rArr; uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
</UL>

<P><STRONG><a name="[56b]"></a>uffs_ReInitObject</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uffs_ReInitObject &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[56c]"></a>uffs_GetObjectIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
</UL>

<P><STRONG><a name="[56d]"></a>uffs_GetObjectByIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>

<P><STRONG><a name="[576]"></a>uffs_CreateObjectEx</STRONG> (Thumb, 556 bytes, Stack size 192 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196 + Unknown Stack Size
<LI>Call Chain = uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFreeFsnSerial
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
</UL>

<P><STRONG><a name="[577]"></a>uffs_ParseObject</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = uffs_ParseObject &rArr; uffs_TreeFindDirNodeByName &rArr; uffs_TreeCompareFileName &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReInitObject
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirLengthFromPath
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObject
</UL>

<P><STRONG><a name="[546]"></a>uffs_CreateObject</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1228 + Unknown Stack Size
<LI>Call Chain = uffs_CreateObject &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
</UL>

<P><STRONG><a name="[579]"></a>uffs_OpenObjectEx</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236 + Unknown Stack Size
<LI>Call Chain = uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeByName
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeByName
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
</UL>

<P><STRONG><a name="[532]"></a>uffs_OpenObject</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1268 + Unknown Stack Size
<LI>Call Chain = uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
</UL>

<P><STRONG><a name="[53f]"></a>uffs_FlushObject</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TruncateObject
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
</UL>

<P><STRONG><a name="[537]"></a>uffs_CloseObject</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FlushObject
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
</UL>

<P><STRONG><a name="[539]"></a>uffs_WriteObject</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
</UL>

<P><STRONG><a name="[538]"></a>uffs_ReadObject</STRONG> (Thumb, 408 bytes, Stack size 80 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 884 + Unknown Stack Size
<LI>Call Chain = uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufRead
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
</UL>

<P><STRONG><a name="[53a]"></a>uffs_SeekObject</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, uffs_fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
</UL>

<P><STRONG><a name="[53c]"></a>uffs_GetCurOffset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_tell
</UL>

<P><STRONG><a name="[53e]"></a>uffs_EndOfFile</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_eof
</UL>

<P><STRONG><a name="[544]"></a>uffs_TruncateObject</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uffs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlushObject
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ftruncate
</UL>

<P><STRONG><a name="[57c]"></a>_CheckObjBufRef</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _CheckObjBufRef &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindFrom
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
</UL>

<P><STRONG><a name="[542]"></a>uffs_DeleteObject</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332 + Unknown Stack Size
<LI>Call Chain = uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDirNodeWithParent
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNodeWithParent
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRemoveSuspendNode
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeSuspendAdd
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushAll
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcessSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
</UL>

<P><STRONG><a name="[57e]"></a>uffs_MoveObjectEx</STRONG> (Thumb, 244 bytes, Stack size 192 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = uffs_MoveObjectEx &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
</UL>

<P><STRONG><a name="[540]"></a>uffs_RenameObject</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300 + Unknown Stack Size
<LI>Call Chain = uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_ReleaseObjectResource
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
</UL>

<P><STRONG><a name="[57f]"></a>ulog_strcpy</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ulog_strcpy &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[584]"></a>ulog_ultoa</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ulog_ultoa
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[617]"></a>ulog_output_lock_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ulog.o(.text), UNUSED)

<P><STRONG><a name="[583]"></a>ulog_head_formater</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ulog_head_formater &rArr; ulog_strcpy &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_ultoa
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[585]"></a>ulog_tail_formater</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ulog_tail_formater &rArr; ulog_strcpy &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[586]"></a>ulog_formater</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ulog_formater &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[587]"></a>ulog_hex_formater</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ulog_hex_formater &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[58d]"></a>ulog_voutput</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hexdump
</UL>

<P><STRONG><a name="[e7]"></a>ulog_output</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spimxfer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>

<P><STRONG><a name="[58e]"></a>ulog_raw</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[58f]"></a>ulog_hexdump</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[590]"></a>ulog_backend_register</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ulog_backend_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>

<P><STRONG><a name="[591]"></a>ulog_backend_unregister</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[592]"></a>ulog_backend_set_filter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[593]"></a>ulog_backend_find</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>

<P><STRONG><a name="[e8]"></a>ulog_flush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ulog_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>

<P><STRONG><a name="[9d]"></a>ulog_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[594]"></a>ulog_deinit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ulog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>

<P><STRONG><a name="[58c]"></a>ulog_console_backend_output</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, console_be.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ulog_console_backend_output &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>ulog_console_backend_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, console_be.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ulog_console_backend_init &rArr; ulog_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[618]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[619]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_strtohex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_ishex
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[595]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[238]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_strtohex
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_ishex
</UL>

<P><STRONG><a name="[f5]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Version2Str
</UL>

<P><STRONG><a name="[5a2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5a3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[ce]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[61a]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[175]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_tail
</UL>

<P><STRONG><a name="[230]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
</UL>

<P><STRONG><a name="[24a]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[221]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_uuid_find
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_short_name_find
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_name_find
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
</UL>

<P><STRONG><a name="[210]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
</UL>

<P><STRONG><a name="[1f0]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[1db]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_short_name_find
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_name_find
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMatchedMountPointSize
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[1f2]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPointEx
</UL>

<P><STRONG><a name="[212]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[3d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateNewFile
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashUnloadSpare
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufRead
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MoveObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[59e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[61b]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_modes_config_set
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTagName
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[61c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[61d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[61e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMakeSpare
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ForceFormatAndCheckBlock
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoInitCache
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[5a0]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[59f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcs_internal_state_reset
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObject
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDirEntry
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceRelease
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeRelease
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInit
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufInit
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReInitObject
</UL>

<P><STRONG><a name="[61f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[620]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5a1]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e6]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[108]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetMountTableByMountPoint
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[621]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[622]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[623]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[59c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[624]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[625]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[596]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[626]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[598]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[597]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[59d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[627]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[628]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5a5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[dc]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[59a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[629]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[62a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ea]"></a>get_cur_thread_stack_info</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[ec]"></a>get_cur_thread_name</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_cur_thread_name
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
</UL>

<P><STRONG><a name="[ed]"></a>dump_stack</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = dump_stack &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
</UL>

<P><STRONG><a name="[ef]"></a>disassembly_ins_is_bl_blx</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cm_backtrace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack_any
</UL>

<P><STRONG><a name="[f3]"></a>print_call_stack</STRONG> (Thumb, 132 bytes, Stack size 160 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
</UL>

<P><STRONG><a name="[f8]"></a>fault_diagnosis</STRONG> (Thumb, 936 bytes, Stack size 8 bytes, cm_backtrace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = fault_diagnosis &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[fb]"></a>statck_del_fpu_regs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cm_backtrace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[129]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[12a]"></a>bus_fault_track</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[12b]"></a>mem_manage_fault_track</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[12c]"></a>hard_fault_track</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[149]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[153]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[151]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[154]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[15e]"></a>rt_ringbuffer_status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[43]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>_pin_cmd_conv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pin_cmd_conv &rArr; rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[171]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[172]"></a>_pin_cmd_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _pin_cmd_get &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[173]"></a>_pin_cmd_mode</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _pin_cmd_mode &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[177]"></a>_pin_cmd_read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _pin_cmd_read &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[178]"></a>_pin_cmd_write</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[a6]"></a>_pin_cmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[46]"></a>_mtd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtd_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_mtd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtd_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>_mtd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtd_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_mtd_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mtd_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_mtd_write</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mtd_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_mtd_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mtd_nand.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>mtd_dump_hex</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mtd_dump_hex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
</UL>

<P><STRONG><a name="[a7]"></a>mtd_nand</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, mtd_nand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mtd_nand &rArr; mtd_nand_write &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase_all
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_erase
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_readoob
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nand_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nandid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mtd_nand.o(FSymTab)
</UL>
<P><STRONG><a name="[186]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[187]"></a>_serial_check_buffer_size</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[188]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[189]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
</UL>

<P><STRONG><a name="[18a]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[18b]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[18c]"></a>_serial_dma_rx</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[4c]"></a>rt_serial_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>rt_serial_open</STRONG> (Thumb, 834 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>rt_serial_close</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>rt_serial_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>rt_serial_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>rt_serial_control</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>_serial_poll_rx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[190]"></a>_serial_poll_tx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[18e]"></a>_serial_int_tx</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[18f]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[52]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>clk_event_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_write
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[1b0]"></a>nrf_gpio_cfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_mode
</UL>

<P><STRONG><a name="[1b2]"></a>get_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_irq_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_dettach_irq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_attach_irq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_read
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_write
</UL>

<P><STRONG><a name="[72]"></a>nrf5x_pin_write</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf5x_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>nrf5x_pin_read</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf5x_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>nrf5x_pin_mode</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf5x_pin_mode &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>pin_irq_hdr</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pin_irq_hdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>nrf5x_pin_attach_irq</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf5x_pin_attach_irq &rArr; nrfx_gpiote_in_init &rArr; gpiote_in_init &rArr; accuracy_channel_alloc &rArr; nrfx_gpiote_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>nrf5x_pin_dettach_irq</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf5x_pin_dettach_irq &rArr; nrfx_gpiote_in_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>nrf5x_pin_irq_enable</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf5x_pin_irq_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf5x_pin_mode
</UL>

<P><STRONG><a name="[1be]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[1bd]"></a>spi_index_find</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[3]"></a>spi0_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = spi0_handler &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>spi1_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = spi1_handler &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>spi2_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = spi2_handler &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>spi_configure</STRONG> (Thumb, 524 bytes, Stack size 88 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = spi_configure &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_index_find
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>spixfer</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spixfer &rArr; nrfx_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_index_find
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>rt_hw_spi_bus_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, drv_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[1c3]"></a>spim_index_find</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spimxfer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_configure
</UL>

<P><STRONG><a name="[6]"></a>spim3_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_spim.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_spim.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>spim_configure</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, drv_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = spim_configure &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_index_find
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spim.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>spimxfer</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, drv_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = spimxfer &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_nrfx_spim_xfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_index_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spim.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>rt_hw_spim_bus_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, drv_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_hw_spim_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spim_init
</UL>

<P><STRONG><a name="[7]"></a>uart0_event_hander</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = uart0_event_hander &rArr; rt_hw_serial_isr &rArr; rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_uart_cfg</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _uart_cfg &rArr; nrfx_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_uart_ctrl</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _uart_ctrl &rArr; _uart_cfg &rArr; nrfx_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uart_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_uart_putc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _uart_putc &rArr; uart_putc_hook &rArr; rt_ringbuffer_putchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_uart_getc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _uart_getc &rArr; uart_getc_hook &rArr; rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>fd_alloc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = fd_alloc &rArr; rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[1eb]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1ed]"></a>copydir</STRONG> (Thumb, 246 bytes, Stack size 384 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[1ef]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[59]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[21c]"></a>shell_auto_complete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; stat &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[21f]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[220]"></a>shell_push_history</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_push_history &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[229]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[22a]"></a>msh_get_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[22b]"></a>_msh_exec_cmd</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[22e]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[22f]"></a>msh_get_cmd_opt</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd_opt &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[233]"></a>msh_get_argc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msh_get_argc
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[231]"></a>msh_opt_complete</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[232]"></a>msh_opt_help</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, msh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_opt_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[242]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[ad]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[23b]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[23c]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[23f]"></a>show_wait_queue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[241]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[23d]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[249]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[b0]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b1]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b2]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cmd_mv &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b3]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[24b]"></a>directory_delete_for_msh</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[b4]"></a>cmd_rm</STRONG> (Thumb, 704 bytes, Stack size 96 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b5]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b6]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b7]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b8]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[b9]"></a>cmd_mount</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cmd_mount &rArr; dfs_mount &rArr; rt_device_open &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[ba]"></a>cmd_umount</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = cmd_umount &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bb]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bc]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bd]"></a>cmd_tail</STRONG> (Thumb, 1098 bytes, Stack size 48 bytes, msh_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = cmd_tail &rArr; open &rArr; fd_new &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[98]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[99]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[9e]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[a4]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[25c]"></a>rt_defunct_execute</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_thread_entry
</UL>

<P><STRONG><a name="[5a]"></a>idle_thread_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = idle_thread_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[278]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[260]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[26f]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[25f]"></a>_ipc_list_suspend</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend_with_flag &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[261]"></a>_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[268]"></a>_rt_sem_take</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take_killable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take_interruptible
</UL>

<P><STRONG><a name="[270]"></a>_thread_get_mutex_priority</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_setprioceiling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[26e]"></a>_thread_update_priority</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_setprioceiling
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[277]"></a>_rt_mutex_take</STRONG> (Thumb, 792 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take_killable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take_interruptible
</UL>

<P><STRONG><a name="[282]"></a>_rt_event_recv</STRONG> (Thumb, 704 bytes, Stack size 72 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv_killable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv_interruptible
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[28b]"></a>_rt_mb_send_wait</STRONG> (Thumb, 704 bytes, Stack size 64 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait_killable
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait_interruptible
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[293]"></a>_rt_mb_recv</STRONG> (Thumb, 550 bytes, Stack size 64 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv_killable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv_interruptible
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[271]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[262]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[263]"></a>_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[26c]"></a>_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_urgent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_recv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mb_send_wait
</UL>

<P><STRONG><a name="[299]"></a>print_number</STRONG> (Thumb, 548 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[29b]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2a2]"></a>_heap_unlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[2a3]"></a>_heap_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[2ac]"></a>plug_holes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_realloc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[2b0]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2b1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[2b6]"></a>_scheduler_stack_check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2b7]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler_up.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[2c0]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[5b]"></a>_thread_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_thread_timeout</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _thread_timeout &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[2c1]"></a>_thread_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[2c9]"></a>rt_thread_set_suspend_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_set_suspend_state &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
</UL>

<P><STRONG><a name="[2c2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[2d9]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[2d6]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[2d1]"></a>_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[2d3]"></a>_timer_list_next_timeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[2d5]"></a>_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[5d]"></a>_timer_thread_entry</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _timer_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[2d2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>

<P><STRONG><a name="[2d4]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[2dd]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[2dc]"></a>nrf_gpio_cfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[2de]"></a>apply_config</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[2e4]"></a>interrupts_enable</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[2e8]"></a>interrupts_disable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interrupts_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[2ea]"></a>pins_to_default</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[2ec]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[2ed]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[2f2]"></a>rx_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_enable
</UL>

<P><STRONG><a name="[2f3]"></a>rx_byte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fe]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fa]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_abort
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2fc]"></a>uart_irq_handler</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[2e7]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2e5]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_errorsrc_get
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2ee]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_ready
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2fd]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2e9]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_abort
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_errorsrc_get
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2e2]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2e3]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2f1]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_abort
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx_disable
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>

<P><STRONG><a name="[2e0]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2e1]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[2eb]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[2df]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[300]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[2ff]"></a>nrf_gpio_cfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[301]"></a>spim_abort</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_abort
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[307]"></a>spim_pin_uninit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[30b]"></a>spim_int_enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spim_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[311]"></a>spim_list_enable_handle</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[30c]"></a>spim_xfer</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_rx_buffer_set
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_tx_buffer_set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_list_enable_handle
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[314]"></a>finish_transfer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = finish_transfer &rArr; rt_completion_done &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[315]"></a>rtt_spim_xfer</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rtt_spim_xfer &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_rx_buffer_set
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_tx_buffer_set
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_list_enable_handle
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_nrfx_spim_xfer
</UL>

<P><STRONG><a name="[317]"></a>irq_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = irq_handler &rArr; finish_transfer &rArr; rt_completion_done &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM3_IRQHandler
</UL>

<P><STRONG><a name="[30d]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[306]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
</UL>

<P><STRONG><a name="[302]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_abort
</UL>

<P><STRONG><a name="[310]"></a>nrf_spim_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[303]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_abort
</UL>

<P><STRONG><a name="[30a]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_int_enable
</UL>

<P><STRONG><a name="[30e]"></a>nrf_spim_tx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[30f]"></a>nrf_spim_rx_buffer_set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, nrfx_spim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[308]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_uninit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_pin_uninit
</UL>

<P><STRONG><a name="[305]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_nrfx_spim_xfer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[304]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_nrfx_spim_xfer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_spim_xfer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[31f]"></a>nrfx_clock_is_running</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
</UL>

<P><STRONG><a name="[31a]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_disable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>

<P><STRONG><a name="[321]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
</UL>

<P><STRONG><a name="[31b]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_disable
</UL>

<P><STRONG><a name="[31e]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
</UL>

<P><STRONG><a name="[31d]"></a>nrf_clock_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
</UL>

<P><STRONG><a name="[322]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[318]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, nrfx_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[325]"></a>nrf52_errata_36</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[326]"></a>nrf52_errata_66</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[327]"></a>nrf52_errata_98</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[328]"></a>nrf52_errata_103</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[329]"></a>nrf52_errata_115</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32a]"></a>nrf52_errata_120</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32b]"></a>nrf52_errata_136</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32c]"></a>nrf52_errata_249</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_nrf52840.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[32e]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[331]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_toggle
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[330]"></a>nrf_gpio_cfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[332]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[370]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
</UL>

<P><STRONG><a name="[33e]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_uninit
</UL>

<P><STRONG><a name="[334]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_check
</UL>

<P><STRONG><a name="[34d]"></a>pin_in_use</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[34b]"></a>pin_in_use_as_non_task_out</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_uninit
</UL>

<P><STRONG><a name="[343]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_get
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[342]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[348]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_uninit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
</UL>

<P><STRONG><a name="[34e]"></a>pin_in_use_by_te_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_in_use_by_te_set
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[34f]"></a>pin_in_use_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[33f]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[352]"></a>pin_configured_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_configured_set
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[347]"></a>pin_configured_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_configured_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[333]"></a>pin_configured_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_configured_check &rArr; nrf_bitmask_bit_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[344]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_get
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_trigger
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_trigger
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_trigger
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_get
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_get
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_get
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[36b]"></a>channel_handler_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[372]"></a>port_handler_pin_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[368]"></a>port_handler_polarity_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[339]"></a>low_accuracy_channel_alloc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accuracy_channel_alloc
</UL>

<P><STRONG><a name="[337]"></a>channel_allocated_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_alloc
</UL>

<P><STRONG><a name="[336]"></a>is_allocated_channel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_alloc
</UL>

<P><STRONG><a name="[338]"></a>accuracy_channel_alloc</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accuracy_channel_alloc &rArr; nrfx_gpiote_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_alloc
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_accuracy_channel_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_in_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[33c]"></a>channel_allocated_clr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_free
</UL>

<P><STRONG><a name="[33b]"></a>is_app_channel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_free
</UL>

<P><STRONG><a name="[33d]"></a>channel_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = channel_free &rArr; nrfx_gpiote_channel_free
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[34c]"></a>gpiote_out_init</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accuracy_channel_alloc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te_set
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_prealloc_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
</UL>

<P><STRONG><a name="[366]"></a>gpiote_in_init</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gpiote_in_init &rArr; accuracy_channel_alloc &rArr; nrfx_gpiote_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accuracy_channel_alloc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te_set
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_prealloc_init
</UL>

<P><STRONG><a name="[36f]"></a>latch_pending_read_and_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[371]"></a>port_event_handle</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[340]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[363]"></a>nrf_gpiote_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_trigger
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_trigger
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_trigger
</UL>

<P><STRONG><a name="[35b]"></a>nrf_gpiote_task_address_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_addr_get
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_addr_get
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_addr_get
</UL>

<P><STRONG><a name="[373]"></a>nrf_gpiote_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[32f]"></a>nrf_gpiote_event_address_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_addr_get
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[341]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[345]"></a>nrf_gpiote_te_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[359]"></a>nrf_gpiote_out_task_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_trigger
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_task_get
</UL>

<P><STRONG><a name="[35d]"></a>nrf_gpiote_set_task_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_trigger
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_set_task_get
</UL>

<P><STRONG><a name="[360]"></a>nrf_gpiote_clr_task_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_trigger
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_clr_task_get
</UL>

<P><STRONG><a name="[36a]"></a>nrf_gpiote_in_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_get
</UL>

<P><STRONG><a name="[346]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_uninit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_uninit
</UL>

<P><STRONG><a name="[350]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_set
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[351]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_clear
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_out_init
</UL>

<P><STRONG><a name="[369]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_gpiote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
</UL>

<P><STRONG><a name="[386]"></a>irq_handler</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_disable
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_check
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable_check
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[37f]"></a>nrf_rtc_cc_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
</UL>

<P><STRONG><a name="[380]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
</UL>

<P><STRONG><a name="[377]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_disable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_disable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_disable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_uninit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[37b]"></a>nrf_rtc_int_enable_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_disable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[37c]"></a>nrf_rtc_event_check</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrfx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_disable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[37d]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_disable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[375]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_disable
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_enable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_uninit
</UL>

<P><STRONG><a name="[381]"></a>nrf_rtc_event_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_enable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_enable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
</UL>

<P><STRONG><a name="[376]"></a>nrf_rtc_event_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_overflow_disable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_tick_disable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_cc_disable
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rtc_uninit
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[388]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[387]"></a>nrf_gpio_cfg</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[390]"></a>finish_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[391]"></a>transfer_byte</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[393]"></a>spi_xfer</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
</UL>

<P><STRONG><a name="[395]"></a>irq_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[38c]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_uninit
</UL>

<P><STRONG><a name="[394]"></a>nrf_spi_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[38e]"></a>nrf_spi_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_uninit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[392]"></a>nrf_spi_txd_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
</UL>

<P><STRONG><a name="[38b]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[38f]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_uninit
</UL>

<P><STRONG><a name="[38a]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[389]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[399]"></a>link_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[397]"></a>data_length_update</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_data_length_set
</UL>

<P><STRONG><a name="[396]"></a>on_connected_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = on_connected_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[398]"></a>on_disconnected_evt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[39e]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[39f]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_exchange_mtu_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[39a]"></a>on_data_length_update_evt</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_data_length_update_evt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[39b]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_ble_gatt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[3a7]"></a>set_security_req</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ble_srv_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptor_add
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[3a1]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[3ae]"></a>whitelist_has_entries</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
</UL>

<P><STRONG><a name="[3b2]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[3b9]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
</UL>

<P><STRONG><a name="[3be]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[3ab]"></a>flags_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
</UL>

<P><STRONG><a name="[3ad]"></a>use_whitelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = use_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
</UL>

<P><STRONG><a name="[3af]"></a>set_adv_mode_slow</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b0]"></a>set_adv_mode_fast</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b6]"></a>set_adv_mode_directed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b5]"></a>set_adv_mode_directed_high_duty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b4]"></a>phy_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b1]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3b7]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[3b8]"></a>on_terminated</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[3bb]"></a>config_is_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[3bc]"></a>adv_set_data_size_max_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_advdata_update
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[3c5]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[3c3]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[3db]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3de]"></a>name_encode</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3d2]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3dc]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3dd]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3d5]"></a>uuid_list_sized_encode</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[3d4]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3d7]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[3d6]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3d8]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3da]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3d3]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[3f2]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[3e4]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[3e8]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[3e9]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_resume
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[3eb]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_suspend
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[3e6]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[3ea]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, nrf_sdh.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[3ec]"></a>sd_nvic_DisableIRQ</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, nrf_sdh.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[3f4]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[3f7]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_change_conn_params
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[3fc]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[3f6]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
</UL>

<P><STRONG><a name="[3f5]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[61]"></a>update_timeout_handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = update_timeout_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params_rtt.o(.text)
</UL>
<P><STRONG><a name="[3fa]"></a>conn_params_negotiation</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = conn_params_negotiation &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[3fb]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3fd]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_disconnect &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3fe]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3ff]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[c0]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; rt_timer_start &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params_rtt.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[404]"></a>ram_end_address_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_sdh_ble_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
</UL>

<P><STRONG><a name="[c7]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 108 bytes, Stack size 544 bytes, nrf_sdh_ble_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble_rtt.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[407]"></a>user_mem_reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
</UL>

<P><STRONG><a name="[406]"></a>on_user_mem_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_user_mem_request &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[408]"></a>on_user_mem_release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[409]"></a>on_rw_authorize_request</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_qwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_rw_authorize_request
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[40a]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[40b]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[40c]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ble_nus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[c5]"></a>ble_evt_handler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[410]"></a>ble_stack_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_ble_default_cfg_set &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[62]"></a>on_adv_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_adv_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[411]"></a>advertising_init</STRONG> (Thumb, 100 bytes, Stack size 184 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[413]"></a>advertising_start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[414]"></a>gap_params_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[415]"></a>gatt_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[63]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[417]"></a>uart_software_intterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = uart_software_intterrupt &rArr; rt_hw_serial_isr &rArr; rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[64]"></a>nus_data_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = nus_data_handler &rArr; uart_software_intterrupt &rArr; rt_hw_serial_isr &rArr; rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; ulog_output &rArr; ulog_voutput &rArr; output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_software_intterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[418]"></a>services_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = services_init &rArr; ble_nus_init &rArr; characteristic_add &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[66]"></a>conn_params_error_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_app_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>on_conn_params_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[41a]"></a>conn_params_init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_app_softdevice
</UL>

<P><STRONG><a name="[67]"></a>ble_app_softdevice</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ble_app_softdevice &rArr; conn_params_init &rArr; ble_conn_params_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>uart_task</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ble_app_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = uart_task &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_app_uart.o(.text)
</UL>
<P><STRONG><a name="[41f]"></a>record_activate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[420]"></a>record_invalidate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[421]"></a>record_set_disconnected</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[422]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[423]"></a>user_flag_is_acquired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>

<P><STRONG><a name="[425]"></a>flag_toggle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_toggle &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>

<P><STRONG><a name="[bf]"></a>ble_evt_handler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ble_conn_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_evt_handler &rArr; record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[435]"></a>for_each_set_flag</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ble_conn_state.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_connected
</UL>

<P><STRONG><a name="[444]"></a>nrfx_clock_is_running</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_is_running
</UL>

<P><STRONG><a name="[438]"></a>lfclk_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_stop &rArr; nrfx_clock_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[439]"></a>hfclk_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_start
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[43b]"></a>hfclk_stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_stop
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[43d]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[43c]"></a>clock_clk_started_notify</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[69]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(.text)
</UL>
<P><STRONG><a name="[441]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[c6]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[c8]"></a>sd_state_evt_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrf_drv_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; lfclk_stop &rArr; nrfx_clock_stop &rArr; nrfx_clock_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[463]"></a>_LinkToBufListHead</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uffs_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>

<P><STRONG><a name="[462]"></a>_BreakFromBufList</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uffs_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>

<P><STRONG><a name="[461]"></a>_MoveNodeToHead</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _MoveNodeToHead
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromBufList
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LinkToBufListHead
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[464]"></a>_BreakFromDirty</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _BreakFromDirty &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[47a]"></a>_FindBufInDirtyList</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uffs_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[467]"></a>_LinkToBufListTail</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uffs_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>

<P><STRONG><a name="[469]"></a>_GetDirOrFileNameSum</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _GetDirOrFileNameSum &rArr; uffs_MakeSum16 &rArr; uffs_crc16sum &rArr; uffs_crc16update
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>

<P><STRONG><a name="[46e]"></a>CountFreeBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uffs_buf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
</UL>

<P><STRONG><a name="[46d]"></a>_FindFreeBufEx</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _FindFreeBufEx
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountFreeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBuf
</UL>

<P><STRONG><a name="[473]"></a>uffs_BufFlush_Exist_With_BlockCover</STRONG> (Thumb, 1756 bytes, Stack size 104 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsThisBlockUsed
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToErasedListHead
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetNextBlockTimeStamp
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGet
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLoadPhyData
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDirOrFileNameSum
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindBufInDirtyList
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush_NewBlock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_Enough_FreePage
</UL>

<P><STRONG><a name="[485]"></a>uffs_BufFlush_Exist_With_Enough_FreePage</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockTimeStamp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindMinimunPageIdFromDirtyList
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakFromDirty
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveNodeToHead
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[487]"></a>_BufFlush_NewBlock</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = _BufFlush_NewBlock &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToErasedListHead
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlush_Exist_With_BlockCover
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[489]"></a>_CheckDirtyList</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _CheckDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BufFlush
</UL>

<P><STRONG><a name="[4a2]"></a>_IsBufInInDirtyList</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _IsBufInInDirtyList
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
</UL>

<P><STRONG><a name="[491]"></a>_LinkToDirtyList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _LinkToDirtyList &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
</UL>

<P><STRONG><a name="[492]"></a>_FindFreeBuf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _FindFreeBuf &rArr; _FindFreeBufEx
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindFreeBufEx
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
</UL>

<P><STRONG><a name="[496]"></a>_FindMostDirtyGroup</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, uffs_buf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _FindMostDirtyGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushEx
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushMostDirtyGroup
</UL>

<P><STRONG><a name="[4aa]"></a>uffs_result_to_dfs</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, dfs_uffs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_stat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_rename
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_unlink
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_getdents
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_seek
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_flush
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
</UL>

<P><STRONG><a name="[6a]"></a>_device_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dfs_uffs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>_device_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_uffs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.text)
</UL>
<P><STRONG><a name="[4a4]"></a>init_uffs_fs</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = init_uffs_fs &rArr; uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_setup_storage
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RegisterMountTable
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MemSetupSystemAllocator
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mkfs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_uffs_mount
</UL>

<P><STRONG><a name="[8c]"></a>dfs_uffs_mount</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_mount &rArr; init_uffs_fs &rArr; uffs_Mount &rArr; uffs_InitDevice &rArr; uffs_TreeInit &rArr; uffs_PoolInit &rArr; uffs_SemCreate &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>dfs_uffs_unmount</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_unmount &rArr; uffs_UnMount &rArr; uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnRegisterMountTable
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>dfs_uffs_mkfs</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_mkfs &rArr; uffs_UnMount &rArr; uffs_ReleaseDevice &rArr; uffs_BufReleaseAll &rArr; uffs_BufFlushAll &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_erase_block
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uffs_fs
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>dfs_uffs_statfs</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dfs_uffs_statfs &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>dfs_uffs_open</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_open &rArr; uffs_opendir &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_mkdir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>dfs_uffs_close</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_close &rArr; uffs_close &rArr; uffs_CloseObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_close
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>dfs_uffs_ioctl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_uffs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>dfs_uffs_read</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_read &rArr; uffs_read &rArr; uffs_ReadObject &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>dfs_uffs_write</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_write &rArr; uffs_write &rArr; uffs_WriteObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>dfs_uffs_flush</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_flush &rArr; uffs_flush &rArr; uffs_FlushObject &rArr; do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_flush
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>dfs_uffs_seek</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_seek &rArr; uffs_seekdir &rArr; uffs_readdir &rArr; uffs_FindObjectNext &rArr; uffs_FindObjectFirst &rArr; do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seek
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rewinddir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_seekdir
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>dfs_uffs_getdents</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_getdents &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_readdir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>dfs_uffs_unlink</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_unlink &rArr; uffs_rmdir &rArr; uffs_DeleteObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rmdir
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_remove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_lstat
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>dfs_uffs_rename</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_rename &rArr; uffs_rename &rArr; uffs_RenameObject &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_rename
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>dfs_uffs_stat</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, dfs_uffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = dfs_uffs_stat &rArr; uffs_stat &rArr; uffs_OpenObject &rArr; uffs_OpenObjectEx &rArr; uffs_CreateObjectEx &rArr; do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_get_error
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_uffs.o(.constdata)
</UL>
<P><STRONG><a name="[4c2]"></a>uffs_GetMountTableByMountPoint</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uffs_mtb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uffs_GetMountTableByMountPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetDeviceFromMountPoint
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_UnMount
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_Mount
</UL>

<P><STRONG><a name="[4cf]"></a>_GetBlockFromNode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _GetBlockFromNode &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
</UL>

<P><STRONG><a name="[4d0]"></a>_InsertToEntry</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDirEntry
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToFileEntry
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertToDataEntry
</UL>

<P><STRONG><a name="[4d3]"></a>uffs_InsertToDataEntry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = uffs_InsertToDataEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[4d4]"></a>uffs_InsertToFileEntry</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = uffs_InsertToFileEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[4d5]"></a>uffs_InsertToDirEntry</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = uffs_InsertToDirEntry &rArr; _InsertToEntry &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
</UL>

<P><STRONG><a name="[4d8]"></a>_BuildValidTreeNode</STRONG> (Thumb, 1058 bytes, Stack size 96 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsSrcNewerThanObj
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetBlockFileDataLength
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindFromTree
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBlockFromNode
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_MakeSum16
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InsertNodeToTree
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPage
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindPageInBlockWithPageId
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindBestPageInBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[4db]"></a>_ScanAndFixUnCleanPage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _ScanAndFixUnCleanPage &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadMiniHeader
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepOne
</UL>

<P><STRONG><a name="[4de]"></a>_BuildTreeStepOne</STRONG> (Thumb, 688 bytes, Stack size 48 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = _BuildTreeStepOne &rArr; _BuildValidTreeNode &rArr; uffs_GetBlockFileDataLength &rArr; uffs_FindBestPageInBlock &rArr; uffs_BlockInfoLoad &rArr; uffs_FlashReadPageTag &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadMiniHeader
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashIsBadBlock
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToBadBlockList
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ScanAndFixUnCleanPage
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildValidTreeNode
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_IsPageErased
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[4e4]"></a>uffs_TreeGetErasedNodeNoCheck</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uffs_tree.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BuildTreeStepTwo
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNode
</UL>

<P><STRONG><a name="[4e2]"></a>_BuildTreeStepTwo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _BuildTreeStepTwo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetCurDateTime
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTailEx
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeGetErasedNodeNoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[4f2]"></a>_BuildTreeStepThree</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, uffs_tree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _BuildTreeStepThree &rArr; uffs_BadBlockProcess &rArr; uffs_FlashMarkBadBlock &rArr; uffs_BlockInfoGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindFileNode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BuildTree
</UL>

<P><STRONG><a name="[4f7]"></a>TagMakeEcc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TagMakeEcc &rArr; uffs_EccMake8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake8
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkDirtyPage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashWritePageCombine
</UL>

<P><STRONG><a name="[4f9]"></a>TagEccCorrect</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TagEccCorrect &rArr; uffs_EccMake8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake8
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect8
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
</UL>

<P><STRONG><a name="[4fc]"></a>InitSpareLayout</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitSpareLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
</UL>

<P><STRONG><a name="[4fd]"></a>CalculateSpareDataSize</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, uffs_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalculateSpareDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashInterfaceInit
</UL>

<P><STRONG><a name="[50b]"></a>_BreakBcFromList</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>

<P><STRONG><a name="[50c]"></a>_InsertToBcListTail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveBcToTail
</UL>

<P><STRONG><a name="[50a]"></a>_MoveBcToTail</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uffs_blockinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _MoveBcToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertToBcListTail
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BreakBcFromList
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
</UL>

<P><STRONG><a name="[519]"></a>ResetFindInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uffs_find.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectClose
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectRewind
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpenEx
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectOpen
</UL>

<P><STRONG><a name="[514]"></a>_LoadObjectInfo</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_FindObject
</UL>

<P><STRONG><a name="[51b]"></a>do_FindObject</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, uffs_find.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868 + Unknown Stack Size
<LI>Call Chain = do_FindObject &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadObjectInfo
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectNext
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FindObjectFirst
</UL>

<P><STRONG><a name="[6c]"></a>sys_malloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sys_malloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_rtthread.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>sys_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, uffs_rtthread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sys_free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_rtthread.o(.text)
</UL>
<P><STRONG><a name="[527]"></a>FindNextAllocatedInSmallPool</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uffs_pool.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FindNextAllocatedInSmallPool &rArr; uffs_PoolGetIndex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetIndex
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGetBufByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolFindNextAllocated
</UL>

<P><STRONG><a name="[52d]"></a>GetDirEntry</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GetDirEntry &rArr; uffs_PoolGet &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
</UL>

<P><STRONG><a name="[52e]"></a>PutDirEntry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PutDirEntry &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_opendir
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_closedir
</UL>

<P><STRONG><a name="[541]"></a>do_stat</STRONG> (Thumb, 134 bytes, Stack size 184 bytes, uffs_fd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = do_stat &rArr; uffs_GetObjectInfo &rArr; _LoadObjectInfo &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_set_error
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_GetObjectInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_fstat
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_stat
</UL>

<P><STRONG><a name="[552]"></a>_ForceFormatAndCheckBlock</STRONG> (Thumb, 788 bytes, Stack size 72 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolPut
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashMarkBadBlock
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PoolGet
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufClone
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFreeClone
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FormatDevice
</UL>

<P><STRONG><a name="[558]"></a>GetTagName</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpTag
</UL>

<P><STRONG><a name="[55a]"></a>DumpBufHex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpTag
</UL>

<P><STRONG><a name="[559]"></a>DumpTag</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBufHex
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTagName
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_LoadMiniHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>

<P><STRONG><a name="[55b]"></a>DumpBlock</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, uffs_utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpTag
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashReadPageTag
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashIsBadBlock
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DumpDevice
</UL>

<P><STRONG><a name="[55d]"></a>uffs_EccMakeChunk256</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uffs_EccMakeChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccMake
</UL>

<P><STRONG><a name="[55e]"></a>uffs_EccCorrectChunk256</STRONG> (Thumb, 282 bytes, Stack size 36 bytes, uffs_ecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uffs_EccCorrectChunk256
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_EccCorrect
</UL>

<P><STRONG><a name="[562]"></a>uffs_InitDeviceConfig</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, uffs_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = uffs_InitDeviceConfig &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_InitDevice
</UL>

<P><STRONG><a name="[93]"></a>nand_init_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_nandif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>nand_release_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uffs_nandif.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>nand_erase_block</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uffs_nandif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nand_erase_block &rArr; rt_mtd_nand_erase_block &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_erase_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>nand_read_page</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, uffs_nandif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nand_read_page &rArr; rt_mtd_nand_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>nand_write_page</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, uffs_nandif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nand_write_page &rArr; rt_mtd_nand_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mtd_nand_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uffs_nandif.o(.constdata)
</UL>
<P><STRONG><a name="[56e]"></a>do_TruncateInternalWithBlockRecover</STRONG> (Thumb, 542 bytes, Stack size 96 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 900 + Unknown Stack Size
<LI>Call Chain = do_TruncateInternalWithBlockRecover &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoExpire
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupEx
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufUnLockGroup
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufLockGroup
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFindGroupSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[571]"></a>GetStartOfDataBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStartOfDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
</UL>

<P><STRONG><a name="[574]"></a>GetFdnByOfs</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFdnByOfs
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ReadObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckObjBufRef
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>

<P><STRONG><a name="[570]"></a>do_WriteInternalBlock</STRONG> (Thumb, 538 bytes, Stack size 88 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufGetEx
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>

<P><STRONG><a name="[572]"></a>do_WriteNewBlock</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = do_WriteNewBlock &rArr; uffs_BufWrite &rArr; uffs_BufFlushGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufWrite
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufNew
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufPut
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
</UL>

<P><STRONG><a name="[573]"></a>do_WriteObject</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteNewBlock
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteInternalBlock
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_WriteObject
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateObject
</UL>

<P><STRONG><a name="[575]"></a>do_TruncateObject</STRONG> (Thumb, 904 bytes, Stack size 56 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004 + Unknown Stack Size
<LI>Call Chain = do_TruncateObject &rArr; do_WriteObject &rArr; do_WriteInternalBlock &rArr; uffs_BufGetEx &rArr; uffs_BufFlushMostDirtyGroup &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BreakFromEntry
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeInsertToErasedListTail
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TreeFindDataNode
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlashEraseBlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoPut
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BlockInfoGet
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockProcess
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufMarkEmpty
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFind
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_WriteObject
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFdnByOfs
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStartOfDataBlock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_TruncateInternalWithBlockRecover
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_TruncateObject
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObjectEx
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CreateObjectEx
</UL>

<P><STRONG><a name="[578]"></a>GetDirLengthFromPath</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uffs_fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_ParseObject
</UL>

<P><STRONG><a name="[57a]"></a>do_ReleaseObjectResource</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = do_ReleaseObjectResource &rArr; uffs_BadBlockRecover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_PutDevice
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BadBlockRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_RenameObject
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_OpenObject
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_DeleteObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
</UL>

<P><STRONG><a name="[57b]"></a>do_FlushObject</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uffs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = do_FlushObject &rArr; uffs_BufFlushGroupMatchParent &rArr; _BufFlush &rArr; uffs_BufFlush_Exist_With_Enough_FreePage &rArr; uffs_BufFlush_Exist_With_BlockCover &rArr; uffs_FlashWritePageCombine &rArr; uffs_FlashReadPage &rArr; uffs_PoolPut &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroupMatchParent
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_BufFlushGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_FlushObject
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uffs_CloseObject
</UL>

<P><STRONG><a name="[580]"></a>output_unlock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = output_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[581]"></a>output_lock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; _thread_update_priority &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[582]"></a>get_log_buf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_log_buf &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[588]"></a>ulog_output_to_all_backend</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ulog_output_to_all_backend &rArr; rt_kputs &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[58b]"></a>do_output</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ulog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_output &rArr; ulog_output_to_all_backend &rArr; rt_kputs &rArr; rt_device_write &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_raw
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[589]"></a>rt_slist_first</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ulog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_deinit
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[58a]"></a>rt_slist_next</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ulog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_deinit
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_find
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[70]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
